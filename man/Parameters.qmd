---
title: "ProteoMaker Pipeline Parameters"
format: html
editor: visual
---

This document provides a detailed description of the parameters used in the ProteoMaker pipeline. ProteoMaker is a tool for generating an in-silico bottom-up LC-MS dataset from proteoforms. The pipeline simulates various stages of the experimental process, from the generation of ground truth data to mass spectrometry (MS) analysis and statistical testing. For more information about the project, visit [ProteoMaker on GitHub](https://github.com/computproteomics/ProteoMaker).

## Global Parameters

### Parallel Computing

*Param\$Cores*: The number of CPU cores to use for parallel computing. Set to `1`. Using multiple cores can significantly speed up the computation.

*Param\$ClusterType*: The type of cluster to use for parallel computing. Currently set to `PSOCK`. The cluster type determines how parallel processing is managed.

## Experimental Design

### Number of Conditions

*Param\$NumCond*: The number of different experimental conditions to be tested. For example, if you are comparing treated versus untreated samples, this value would be 2. This parameter is crucial for setting up the experimental design. Default set to `2`.

### Number of Replicates

*Param\$NumReps*: The number of biological or technical replicates for each condition. Replicates are essential for statistical validity and reproducibility of the results. Ensuring adequate replication helps in reducing variability and increasing the reliability of the results. Default set to `5`.

## Input Data Paths

### Path to FASTA File

*Param\$PathToFasta*: The file path to the FASTA file containing the protein sequences. This file is essential for identifying and quantifying proteins in your samples. Accurate protein identification depends heavily on the quality and completeness of the FASTA file. Default set to `InputData/fasta_full_human.fasta`.

### Path to Protein List

*Param\$PathToProteinList*: The file path to a list of proteins of interest, if any. This can be used to focus the analysis on a subset of proteins. Providing a specific list can streamline the analysis and enhance focus on a set of related proteoforms or biological pathways. Default set to `NA`.

## Ground Truth Proteoform-Centric Data Generation

### Proteoform IDs Generation

*Param\$PercExpressedProt*: The fraction (0-1) of proteins from the FASTA used to seed the ground-truth proteome. The selection is random to mimic that not every protein is expressed; default is `1` (all proteins retained).

*Param\$FracModProt*: The fraction of proteins selected to be modified. This parameter controls how many proteins will undergo post-translational modifications (PTMs). It helps in simulating realistic biological scenarios. Default set to `0.0`, indicating no proteins will be modified.

*Param\$PropModPerProt*: Multiplier for generating additional modified proteoforms per selected protein. Values `>= 2` create extra modified copies (e.g., `2` doubles the number of proteoforms); defaults to `0`, which keeps only the initial modified set.

*Param\$PTMTypes*: The types of PTMs to be considered. Default set to `NA` for no modification. This parameter allows for the inclusion of different types of PTMs in the simulation. Always use a list: `list(mods=c("ph", "ac"))`, `list(mods="ph")`. The mods name is mandatory.

*Param\$PTMTypesDistr*: Relative frequency for each PTM type supplied as a named list (values should sum to 1). Defaults to `NA`, so the simulator uses equal weights unless specified.

*Param\$PTMTypesMass*: Mass shifts associated with each PTM type (provide as a named list, e.g. `list(ph = 79.9663)`). Defaults to `NA` and must be set when PTMs are enabled.

*Param\$PTMMultipleLambda*: Lambda for the Poisson distribution controlling multiply modified proteoforms (scaled by the number of modifiable sites). Defaults to `0`, so no additional multiply modified species are added unless requested.

*Param\$ModifiableResidues*: The residues where each PTM can occur. For phosphorylation, these are usually serine (S), threonine (T), and tyrosine (Y). This parameter defines the possible modification sites on the proteins. Each PTM type requires a set of residues. For phosphorylation, usually we use `list(ph = c("S", "T", "Y"))`

*Param\$ModifiableResiduesDistr*: The relative distribution of modifiable residues. For phosphorylation, this can be set to `0.86` for serine, `0.13` for threonine, and `0.01` for tyrosine. This reflects the observed frequencies of modifications at these residues in real biological data. Also given as named list.

*Param\$RemoveNonModFormFrac*: The fraction of modifiable proteins without non-modified forms. Set to `0`. This parameter controls the presence of non-modified forms of proteins in the simulation.

### Proteoform Abundance Generation

*Param\$QuantColnames*: Vector of column names that hold quantitative values, typically formatted as `C_<condition>_R_<replicate>` to keep conditions and replicates explicit.

*Param\$QuantNoise*: Standard deviation of the log2 noise added to every quantitative value. Default `0.5` to reflect technical and biological variability.

*Param\$DiffRegFrac*: Fraction of proteoforms marked as differentially regulated. Default `0.3`.

*Param\$DiffRegMax*: Maximum absolute log2 fold change applied to regulated proteoforms. Default `1`.

*Param\$UserInputFoldChanges_NumRegProteoforms*: Optional override for the number of regulated proteoforms (default `0`, meaning use the fraction above).

*Param\$UserInputFoldChanges_RegulationFC*: Optional override for the fold change applied to those user-specified proteoforms (default `0`, i.e. disabled).

*Param\$AbsoluteQuanMean*: The mean value for absolute quantitation. Set to `30.5`. This parameter sets the baseline for absolute quantitation values.

*Param\$AbsoluteQuanSD*: The standard deviation for absolute quantitation. Set to `3.6`. This parameter models the variability in absolute quantitation.

*Param\$ThreshNAQuantileProt*: The quantile threshold for removing quantitative values when *AbsoluteQuanMean* is not equal to `NA`. Set to `0.01`. This parameter ensures that a certain proportion of low-abundant proteoforms are cut off.

## Enzymatic Digestion Parameters

### Enzyme

*Param\$Enzyme*: The enzyme used for protein digestion. Set to `trypsin` by default `("(?!(RP\|KP))(?=(K\|R))(?!(K\|R)$)")`. Trypsin is commonly used in proteomics for its specificity and efficiency in cleaving proteins. Other possible values are trypsin.strict `("(?=(K|R))(?!(K|R)$)")`, chymotrypsin.h `("(?!(FP\|YP\|PY\|WP))(?=(F\|Y\|W))(?!(F\|Y\|W)$)")`, chymotrypsin.l `("(?!(FP|YP|PY|WP|LP|MP))(?=(F|Y|W|L|P))(?!(F|Y|W|L|P)$)")`, pepsin.2 `("(?=(F\|L\|W\|Y\|A\|E\|Q))(?!(F\|L\|W\|Y\|A\|E\|Q)$)")`, pepsin.1.3 `("(?=(F|L))(?!(F|L)$)")`, lysC `("(?=(K))(?!(K)$)")`, and argC `("(?!(RP))(?=(R))(?!(R)$)")`.

### Proportion of Peptides with Missed Cleavages

*Param\$PropMissedCleavages*: Additional fraction of peptides simulated with missed cleavages. Default `0.01`.

### Maximum Number of Missed Cleavages

*Param\$MaxNumMissedCleavages*: Maximum number of missed cleavages allowed per peptide. Default `2`.

### Peptide Length Filter

*Param\$PepMinLength*: The minimum length of peptides to be considered. Set to `7`. This filter ensures that only peptides of a certain length are included, which is important for reliable identification.

*Param\$PepMaxLength*: The maximum length of peptides to be considered. Set to `30`. This parameter excludes excessively long peptides that might not be covered by the mass range.

### Least Abundant Peptide Loss

*Param\$LeastAbundantLoss*: The percentage of least abundant peptides to be removed. Set to `0.0`. This parameter allows for the exclusion of peptides that are too low in abundance to be reliably quantified.

## Sample Preparation Simulation Parameters

### PTM for enrichment

*Param\$EnrichPTM*: PTM that will be enriched. One can select only one PTM and all of its residues will be affected. Default is 'NA', so no PTM will be enriched.

### Enrichment Loss

*Param\$EnrichmentLoss*: The loss of phosphorylated peptides during enrichment. Set to `0.2`. This parameter models the inefficiencies in the enrichment process, where some peptides are lost.

## Enrichment Quantitative adjustement

*Param\$EnrichmentQuantDiff*: The adjustment of peptide intensities after enrichment. Set to `0`. This parameter changes the mean intensities of all modified enriched peptides versus mean of all non-modified peptides to reflect the enrichment process.

### Enrichment Efficiency

*Param\$EnrichmentEfficiency*: The efficiency of enrichment for modified peptides. Default set to `1`. This parameter reflects how effectively modified peptides are enriched relative to non-modified peptides, given by the adjusting the peptide intensities.\
The parameter randomly removes non-modified peptides until reaching the given fraction of present modified peptides.

### Enrichment Protocol Noise

*Param\$EnrichmentNoise*: The noise introduced by the enrichment protocol. Set to `0.2`. This parameter adds variability to the enrichment process.

### Modification Loss

*Param\$ModificationLoss*: Removal of modified peptides in non-enriched samples. The parameter denotes the fraction of to be removed peptides. Set to `0`.

## Mass Spectrometry (MS) Run Parameters

### Detectability filter

*Param\$PercDetectability*: Keeps the top fraction of peptides by the PeptideRanger detectability model (e.g., `0.25` retains the most detectable 25%). Default value is `0.25`.

<!--*Param\$PercDetectedPep*: The percentage of peptides detected during the MS run. Set to `0.3`. This parameter #models the efficiency of peptide detection by the MS instrument.-->

### Detected Values

*Param\$PercDetectedVal*: Fraction of intensities retained per replicate/condition (missing values are introduced for the remainder). Default `0.5`.

### Intensity-Dependence Weight

*Param\$WeightDetectVal*: Controls how strongly intensity influences the missing-value mechanism (higher values bias removal toward low-intensity peptides). Ranges 0-50; default `1`.

### MS Noise

*Param\$MSNoise*: Adds Gaussian noise to intensities to mimic instrument variability. Default `0.25` (log2 scale).

## MS Search Parameters

### Wrong Identifications

*Param\$WrongIDs*: The percentage of wrong identifications in the MS search. Set to `0.01`. This parameter models the rate of incorrect peptide identifications due to errors in the database search process.

### Wrong Localizations

*Param\$WrongLocalizations*: Fraction of identifications with incorrect PTM site assignment. Default `0` (no mis-localisations); non-zero values flag affected peptides via the `isMisLocated` column.

## Filtering MS Search Results

### Maximum NA per Peptide

*Param\$MaxNAPerPep*: The maximum number of NA values allowed per peptide. Set to `100`. This parameter filters out peptides with excessive missing values, ensuring more reliable quantitation.

## Protein Summarization

### Summarization Method

*Param\$ProtSummarization*: Method used to aggregate peptide intensities into protein groups. Choices are `sum.top3`, `medpolish`, `median`, `mean`, `sum`, and `rlm`; default is `medpolish`. The `sum`-based methods operate on the anti-log (intensity) scale before log2 transformation.

### Shared Peptides

*Param\$SharedPep*: Boolean whether to include shared peptides in the summarization. Set to `FALSE`. This parameter allows for the inclusion of peptides that are shared between multiple proteins, which can affect quantitation and identification.

### Minimum Number of Unique Peptides

*Param\$MinUniquePep*: The minimum number of unique peptides required for summarization. Set to `1`. This parameter ensures that proteins are summarized only if they have sufficient peptide evidence.

### Include Modified Peptides

*Param\$IncludeModPep*: Boolean controlling whether modified peptides contribute to protein summarisation. Defaults to `FALSE`; set to `TRUE` to keep PTM-bearing peptides when aggregating.

## Statistical Testing of Peptides and Proteins

### Paired or Unpaired

*Param\$StatPaired*: Indicates whether the statistical test is paired. Set to `FALSE`. This parameter determines the type of statistical test applied to the data, affecting the analysis of differential expression.
