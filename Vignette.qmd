---
title: "PhosFake Vignette"
author: ""
date: "2024-07-25"
format: html
---

## Introduction

PhosFake is a simulation tool for generating synthetic proteomics datasets. This vignette will guide you through the process of setting up and running PhosFake simulations, as well as visualizing the results.

## Installation

PhosFake requires several R packages for its operation. The `install_phosfake` function ensures that all necessary packages are installed. This function checks for the presence of the `BiocManager` package and uses it to install the required packages.required packages if you haven't already:

```{r}
# Install the packages
install_phosfake()
```

## Loading Main Functions

The main functions and libraries of PhosFake are essential for running the simulations. The `load_phosfake` function sources all the necessary R scripts and loads required libraries, preparing the environment for the simulations.

```{r}
# Set the working directory to the path of this file
path <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(path)

# Source the main functions
source("R/00_BatchRunFuncs.R")

# Load the PhosFake libraries
load_phosfake()
```

## Configuration

Set up the paths and directories for input and output data, and configure the computational settings. This step ensures that the necessary directories exist and the computational resources are configured correctly.

```{r}
# Configure the paths and settings
phosfake_config <- set_phosfake(
  fastaFilePath = "Proteomes",
  resultFilePath = "SimulatedDataSets",
  cores = 8,
  clusterType = "FORK",
  calcAllBenchmarks = TRUE
)
```

## Set Simulation Parameters

Generate a default list of testing parameters using the `def_param` function. You can overwrite the default values with those you want to test. Multiple values for each parameter can be combined to generate different simulated datasets. This flexibility allows you to customize the simulations according to your arrays of experimental needs.

```{r}
# Generate default parameters
Param <- def_param()

# Example of overwriting default values
Param$paramGroundTruth$NumReps <- c(3:5)
# Param$paramGroundTruth$NumCond <- 2
# Param$paramProteoformAb$QuantNoise <- seq(0.1, 0.9, 0.5)
# Param$paramProteoformAb$DiffRegFrac <- c(0.1, 0.3, 0.5)
# Param$paramProteoformAb$DiffRegMax <- seq(0.5, 2, 0.5)
# Param$paramDigest$Enzyme <- "trypsin"
# Param$paramDigest$PropMissedCleavages <- 0.01
# Param$paramDigest$MaxNumMissedCleavages <- 4
# Param$paramDigest$PepMinLength <- 7
# Param$paramDigest$PepMaxLength <- 30
# Param$paramMSRun$PercDetectedPep <- seq(0.1, 0.5, 0.1)
```

## Running Simulations

Run the simulations using the defined parameters and configuration. This step generates the synthetic datasets based on the specified parameters.

```{r}
# Run the simulations
allBs <- run_sims(Param, phosfake_config)

```

## Retrieving Results

Get the results of an individual simulation. This allows you to inspect the parameters and outputs of a specific run. Retrieving results is useful for detailed analysis of a particular simulation.

```{# Retrieve results}
res <- get_simulation(allBs[[1]]$Param, phosfake_config)

```

## Retrieving Benchmarks

Create a matrix of benchmarks from all simulations and save it as a CSV file. This file contains various metrics and results from the simulations. Generating benchmarks helps in comparing different simulations and assessing their performance.

```{r}
# Generate the benchmark matrix
benchmarks <- matrix_benchmarks(allBs, phosfake_config)
write.csv(benchmarks, file = paste0(phosfake_config$resultFilePath, "/allBenchmarks.csv"))

```

## Visualizing Results

Visualize the results of the benchmarks to analyze the performance and outcomes of the simulations. Visualization aids in interpreting the data and identifyinsg trends or anomalies

```{r}
# visualize the benchmarks and parameters of the second simulation
visualize_benchmarks(benchmarks, 2)

```
