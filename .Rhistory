# type <- "ExpressedProt"
# type <- "WrongID_DiffRegMax"
type <- "UniquePeps_Shared"
# simvar <- c("WrongIDs")
# simvar <- c("PropMissedCleavages")
# simvar <- c("PropMissedCleavages","PepMaxLength")
#simvar <- "PepMaxLength"
# simvar <- "PercExpressedProt"
# simvar <- "NumReps"
# simvar <- c("DiffRegFrac", "DiffRegMax")
simvar <- c("MinUniquePep", "SharedPep")
benchs <- read.csv(paste0("allBenchmarks_", type, ".csv"))
ProteoMaker::visualize_benchmarks(benchs, 1:45, ref_par = c(simvar[1], simvar[2]), errorbar = F)
ProteoMaker::visualize_benchmarks(benchs, 1:45, ref_par = simvar[1], errorbar = F)
benchs$SharedPep
benchs$uniqueStrippedPep
benchs$MinUniquePep
ProteoMaker::visualize_benchmarks(benchs, 1:45, ref_par = simvar[1], errorbar = F)
benchs$numQuantProtGroups
# MinUniquePep
ProteoMaker::visualize_benchmarks(benchs, c(18, 21, 22, 23, 26, 27, 29, 30), ref_par = simvar[1])
# MinUniquePep
ProteoMaker::visualize_benchmarks(benchs, c(18, 21, 22, 23, 26, 27, 29, 30), ref_par = simvar[1], type="l")
# MinUniquePep
ProteoMaker::visualize_benchmarks(benchs, c(18, 21, 22, 23, 26, 27, 29, 30), ref_par = simvar[1])
# MinUniquePep
benchsRed <- benchs[benchs$SharedPep,]
ProteoMaker::visualize_benchmarks(benchsRed, c(18, 21, 22, 23, 26, 27, 29, 30), ref_par = simvar[1])
# MinUniquePep
benchsRed <- benchs[!benchs$SharedPep,]
ProteoMaker::visualize_benchmarks(benchsRed, c(18, 21, 22, 23, 26, 27, 29, 30), ref_par = simvar[1])
ProteoMaker::visualize_benchmarks(benchs, c(18, 21, 22, 23, 26, 27, 29, 30), ref_par = simvar[1], errorbar = T)
ProteoMaker::visualize_benchmarks(benchs, c(18, 21, 22, 23, 26, 27, 29, 30), ref_par = simvar[1], errorbar = F)
gc()
# get benchmarks
# type <- ""
# type <- "WrongIDs_New"
# type <- "DiffReg_New"
# type <- "MisCleav_Multi"
# type <- "MisCleav_PepLength_New"
#type <- "SeqLength"
# type <- "NumReps_New"
# type <- "ExpressedProt"
# type <- "WrongID_DiffRegMax"
type <- "UniquePeps_Shared_Big"
# simvar <- c("WrongIDs")
# simvar <- c("PropMissedCleavages")
# simvar <- c("PropMissedCleavages","PepMaxLength")
#simvar <- "PepMaxLength"
# simvar <- "PercExpressedProt"
# simvar <- "NumReps"
# simvar <- c("DiffRegFrac", "DiffRegMax")
simvar <- c("MinUniquePep", "SharedPep")
benchs <- read.csv(paste0("allBenchmarks_", type, ".csv"))
ProteoMaker::visualize_benchmarks(benchs, 1:45, ref_par = c(simvar[1], simvar[2]), errorbar = F)
ProteoMaker::visualize_benchmarks(benchs, 1:45, ref_par = simvar[1], errorbar = F)
# MinUniquePep
benchsRed <- benchs[!benchs$SharedPep,]
ProteoMaker::visualize_benchmarks(benchsRed, c(18, 21, 22, 23, 26, 27, 29, 30), ref_par = simvar[1])
# MinUniquePep
benchsRed <- benchs[benchs$SharedPep,]
ProteoMaker::visualize_benchmarks(benchsRed, c(18, 21, 22, 23, 26, 27, 29, 30), ref_par = simvar[1])
benchsRed <- benchs
ProteoMaker::visualize_benchmarks(benchsRed, c(18, 21, 22, 23, 26, 27, 29, 30), ref_par = simvar[1])
ProteoMaker::visualize_benchmarks(benchsRed, c(18, 21, 22, 23, 26, 27, 29, 30), ref_par = simvar[1], errorbar = T)
ProteoMaker::visualize_benchmarks(benchs, 1:45, ref_par = simvar[1], errorbar = F)
ProteoMaker::visualize_benchmarks(benchsRed, c(18, 21, 22, 23, 26, 27, 29, 30), ref_par = simvar[1])
# get benchmarks
# type <- "test"
type <- "WrongIDs_Multi"
setwd("~/devel/Bioinformatics/EuBIC/ProteoMaker")
setwd("~/devel/Bioinformatics/EuBIC/ProteoMakerEval")
simvar <- c("WrongIDs")
benchs <- read.csv(paste0("allBenchmarks_", type, ".csv"))
ProteoMaker::visualize_benchmarks(benchs, 1:45, ref_par = c(simvar[1], simvar[2]), errorbar = F)
ProteoMaker::visualize_benchmarks(benchs, 1:45, ref_par = simvar[1], errorbar = F)
# WrongIDs
ProteoMaker::visualize_benchmarks(benchs, c(2, 18, 22, 24) , ref_par = simvar[1])
# WrongIDs
ProteoMaker::visualize_benchmarks(benchs, c(2, 18, 22, 24) , ref_par = simvar[1], errorbar = T)
# Calculate peptides per protein distribution
PepsPerProt <- sapply(Stats$Sequence, function(x) {
length(strsplit(x, ";")[[1]])
})
barplot(table(PepsPerProt), main = "Peptides per protein distribution",
xlab = "Number of peptides", ylab = "Number of proteins",
borde=NA, col="#AC9362")
df_long <- pivot_longer(Peps, cols = everything(), names_to = "Variable", values_to = "Value")
ggplot(df_long, aes(x = Variable, y = Value, fill = Variable)) +
geom_violin(trim = FALSE, color = "black") +
scale_fill_manual(values = rep(c("skyblue", "aquamarine2"), each=3)) +
theme_minimal() +
labs(title = "Peptide distributions",
y = "Intensity", x = "")
df_long <- pivot_longer(Prots, cols = everything(), names_to = "Variable", values_to = "Value")
library(dplyr)
df_long <- pivot_longer(Prots, cols = everything(), names_to = "Variable", values_to = "Value")
??pivot_longer
library(tidyr)
df_long <- pivot_longer(Prots, cols = everything(), names_to = "Variable", values_to = "Value")
# load("outputDataAnalysis_942cb2fda132abe9cfe2d5c9dcb700d0.RData")
load("outputDataAnalysis_34ad92442b86180fbb26202fbd0d8bfa.RData")
Peps <- StatsPep[, c(17:22)]
Prots <- Stats[, c(17:22)]
boxplot(Peps)
dim(Peps)
dim(Prots)
# Calculate peptides per protein distribution
PepsPerProt <- sapply(Stats$Sequence, function(x) {
length(strsplit(x, ";")[[1]])
})
barplot(table(PepsPerProt), main = "Peptides per protein distribution",
xlab = "Number of peptides", ylab = "Number of proteins",
borde=NA, col="#AC9362")
# Miscleavage distribution
barplot(table(unlist(StatsPep$MC)), main = "Miscleavage distribution",
xlab = "Number of miscleavages", ylab = "Number of peptides",
borde=NA, col="#2A9B8D")
df_long <- pivot_longer(Peps, cols = everything(), names_to = "Variable", values_to = "Value")
ggplot(df_long, aes(x = Variable, y = Value, fill = Variable)) +
geom_violin(trim = FALSE, color = "black") +
scale_fill_manual(values = rep(c("skyblue", "aquamarine2"), each=3)) +
theme_minimal() +
labs(title = "Peptide distributions",
y = "Intensity", x = "")
df_long <- pivot_longer(Prots, cols = everything(), names_to = "Variable", values_to = "Value")
ggplot(df_long, aes(x = Variable, y = Value, fill = Variable)) +
geom_violin(trim = FALSE, color = "black") +
scale_fill_manual(values = rep(c("skyblue", "aquamarine2"), each=3)) +
theme_minimal() +
labs(title = "Protein distributions",
y = "Abundance", x = "")
redbenchs <- matrix(NA, nrow = length(benchs$X), ncol = 8,
dimnames = list(benchs$X, c("meanSquareDiffFCPep", "meanSquareDiffFCPep2", "meanSquareDiffFCProt_0",
"meanSquareDiffFCProt_1", "meanSquareDiffFCProt_2",
"meanSquareDiffFCProt_3", "meanSquareDiffFCProt_4",
"meanSquareDiffFCProt_5")))
for (run in benchs$X) {
load(paste0("outputDataAnalysis_", run, ".RData"))
# Get benchmarks for subsets
RedPep <- StatsPep[!StatsPep$WrongID, ]
if(nrow(RedProt) > 1) {
ttt <- ProteoMaker:::calcBenchmarks(Stats, RedPep, Param)
diffpep <- ttt$globalBMs$meanSquareDiffFCPep
}
RedPep <- StatsPep[StatsPep$WrongID, ]
WrongPerProt <- sapply(strsplit(Stats$WrongID,";"), function(x) sum(as.logical(x)))
prot_perc <- rep(NA, 6)
# Run over differnt numbers of wrong peptides per protein
for (i in 0:5) {
RedProt <- Stats[WrongPerProt == i, ]
if(nrow(RedProt) < 2) next
if(nrow(RedPep) < 2) next
ttt <- ProteoMaker:::calcBenchmarks(RedProt, RedPep, Param)
prot_perc[i+1] <- ttt$globalBMs$meanSquareDiffFCProt
}
redbenchs[run, ] <- c(diffpep, ttt$globalBMs$meanSquareDiffFCPep, prot_perc)
}
benchs$X
runs <- benchs$X[1:9]
for (run in runs) {
load(paste0("outputDataAnalysis_", run, ".RData"))
# Get benchmarks for subsets
RedPep <- StatsPep[!StatsPep$WrongID, ]
if(nrow(RedProt) > 1) {
ttt <- ProteoMaker:::calcBenchmarks(Stats, RedPep, Param)
diffpep <- ttt$globalBMs$meanSquareDiffFCPep
}
RedPep <- StatsPep[StatsPep$WrongID, ]
WrongPerProt <- sapply(strsplit(Stats$WrongID,";"), function(x) sum(as.logical(x)))
prot_perc <- rep(NA, 6)
# Run over differnt numbers of wrong peptides per protein
for (i in 0:5) {
RedProt <- Stats[WrongPerProt == i, ]
if(nrow(RedProt) < 2) next
if(nrow(RedPep) < 2) next
ttt <- ProteoMaker:::calcBenchmarks(RedProt, RedPep, Param)
prot_perc[i+1] <- ttt$globalBMs$meanSquareDiffFCProt
}
redbenchs[run, ] <- c(diffpep, ttt$globalBMs$meanSquareDiffFCPep, prot_perc)
}
load(paste0("outputDataAnalysis_", run, ".RData"))
# Get benchmarks for subsets
RedPep <- StatsPep[!StatsPep$WrongID, ]
if(nrow(RedProt) > 1) {
ttt <- ProteoMaker:::calcBenchmarks(Stats, RedPep, Param)
diffpep <- ttt$globalBMs$meanSquareDiffFCPep
}
RedPep
ttt <- ProteoMaker:::calcBenchmarks(Stats, RedPep, Param)
runs <- benchs$X[1:9]
for (run in runs) {
load(paste0("outputDataAnalysis_", run, ".RData"))
# Get benchmarks for subsets
RedPep <- StatsPep[!StatsPep$WrongID, ]
if(nrow(RedPep) > 1) {
ttt <- ProteoMaker:::calcBenchmarks(Stats, RedPep, Param)
diffpep <- ttt$globalBMs$meanSquareDiffFCPep
}
RedPep <- StatsPep[StatsPep$WrongID, ]
WrongPerProt <- sapply(strsplit(Stats$WrongID,";"), function(x) sum(as.logical(x)))
prot_perc <- rep(NA, 6)
# Run over differnt numbers of wrong peptides per protein
for (i in 0:5) {
RedProt <- Stats[WrongPerProt == i, ]
if(nrow(RedProt) < 2) next
if(nrow(RedPep) < 2) next
ttt <- ProteoMaker:::calcBenchmarks(RedProt, RedPep, Param)
prot_perc[i+1] <- ttt$globalBMs$meanSquareDiffFCProt
}
redbenchs[run, ] <- c(diffpep, ttt$globalBMs$meanSquareDiffFCPep, prot_perc)
}
plot(benchs$WrongIDs, redbenchs[,1], type="b", pch=16, col="#AA3333", ylim=c(0, max(redbenchs[,1:5], na.rm=T)),
xlab="Wrong identification rate", ylab="Mean square difference in fold change")
lines(benchs$WrongIDs, redbenchs[,2], type="b", pch=15, col="#33AA33")
lines(benchs$WrongIDs, redbenchs[,3], type="b", pch=16, col="#33AAAA")
lines(benchs$WrongIDs, redbenchs[,4], type="b", pch=15, col="#AA33AA")
lines(benchs$WrongIDs, redbenchs[,5], type="b", pch=15, col="#AAAA33")
# lines(benchs$WrongIDs, redbenchs[,6], type="b", pch=15, col="#AA3333")
# lines(benchs$WrongIDs, redbenchs[,7], type="b", pch=15, col="#3333AA")
# lines(benchs$WrongIDs, redbenchs[,8], type="b", pch=15, col="#AA33AA")
# Add legend
legend("topright", legend = c("Correct peptides", "Wrong peptides", "Proteins, no wrong peptides", "Proteins, 1 wrong peptide",
"Proteins, 2 wrong peptides",
"Proteins, 3 wrong peptides"),#, "Proteins 4 wrong peptides", "Proteins 5 wrong peptides"),
col = c("#AA3333", "#33AA33", "#33AAAA", "#AA33AA", "#AAAA33", "#AA3333", "#3333AA", "#AA33AA"),
pch = c(16, 15, 16, 15, 15, 15), lty = 1)
# get benchmarks
# type <- "test"
# type <- "WrongIDs_Multi"
# type <- "DiffReg_New"
# type <- "MisCleav_Multi"
# type <- "MisCleav_PepLength_New"
#type <- "SeqLength"
# type <- "NumReps_New"
# type <- "ExpressedProt"
# type <- "WrongID_DiffRegMax"
type <- "UniquePeps_Shared_Big_LargerDiff"
# simvar <- c("WrongIDs")
# simvar <- c("PropMissedCleavages")
# simvar <- c("PropMissedCleavages","PepMaxLength")
#simvar <- "PepMaxLength"
# simvar <- "PercExpressedProt"
# simvar <- "NumReps"
# simvar <- c("DiffRegFrac", "DiffRegMax")
simvar <- c("MinUniquePep", "SharedPep")
benchs <- read.csv(paste0("allBenchmarks_", type, ".csv"))
ProteoMaker::visualize_benchmarks(benchs, 1:45, ref_par = c(simvar[1], simvar[2]), errorbar = F)
ProteoMaker::visualize_benchmarks(benchs, 1:45, ref_par = simvar[1], errorbar = F)
# Miscleavages
benchsRed <- benchs[benchs$PepMaxLength == 50,]
ProteoMaker::visualize_benchmarks(benchsRed, c(1:3, 11, 13, 17, 18, 21) , ref_par = simvar[1])
# WrongIDs
ProteoMaker::visualize_benchmarks(benchs, c(2, 18, 22, 24) , ref_par = simvar[1])
# MinUniquePep
# benchsRed <- benchs[benchs$SharedPep,]
ProteoMaker::visualize_benchmarks(benchs, c(18, 21, 22, 23, 26, 27, 29, 30), ref_par = simvar[1])
# get benchmarks
# type <- "test"
# type <- "WrongIDs_Multi"
# type <- "DiffReg_New"
# type <- "MisCleav_Multi"
# type <- "MisCleav_PepLength_New"
#type <- "SeqLength"
# type <- "NumReps_New"
# type <- "ExpressedProt"
# type <- "WrongID_DiffRegMax"
type <- "UniquePeps_Shared_Big"
benchs <- read.csv(paste0("allBenchmarks_", type, ".csv"))
allbenchs <- rbind(benchs, allbenchs)
# get benchmarks
# type <- "test"
# type <- "WrongIDs_Multi"
# type <- "DiffReg_New"
# type <- "MisCleav_Multi"
# type <- "MisCleav_PepLength_New"
#type <- "SeqLength"
# type <- "NumReps_New"
# type <- "ExpressedProt"
# type <- "WrongID_DiffRegMax"
type <- "UniquePeps_Shared"
# simvar <- c("WrongIDs")
# simvar <- c("PropMissedCleavages")
# simvar <- c("PropMissedCleavages","PepMaxLength")
#simvar <- "PepMaxLength"
# simvar <- "PercExpressedProt"
# simvar <- "NumReps"
# simvar <- c("DiffRegFrac", "DiffRegMax")
simvar <- c("MinUniquePep", "SharedPep")
benchs <- read.csv(paste0("allBenchmarks_", type, ".csv"))
allbenchs <- benchs
# get benchmarks
# type <- "test"
# type <- "WrongIDs_Multi"
# type <- "DiffReg_New"
# type <- "MisCleav_Multi"
# type <- "MisCleav_PepLength_New"
#type <- "SeqLength"
# type <- "NumReps_New"
# type <- "ExpressedProt"
# type <- "WrongID_DiffRegMax"
type <- "UniquePeps_Shared_Big"
benchs <- read.csv(paste0("allBenchmarks_", type, ".csv"))
allbenchs <- rbind(allbenchs, benchs)
# get benchmarks
# type <- "test"
# type <- "WrongIDs_Multi"
# type <- "DiffReg_New"
# type <- "MisCleav_Multi"
# type <- "MisCleav_PepLength_New"
#type <- "SeqLength"
# type <- "NumReps_New"
# type <- "ExpressedProt"
# type <- "WrongID_DiffRegMax"
type <- "UniquePeps_Shared_Big_DiffReg"
benchs <- read.csv(paste0("allBenchmarks_", type, ".csv"))
# get benchmarks
# type <- "test"
# type <- "WrongIDs_Multi"
# type <- "DiffReg_New"
# type <- "MisCleav_Multi"
# type <- "MisCleav_PepLength_New"
#type <- "SeqLength"
# type <- "NumReps_New"
# type <- "ExpressedProt"
# type <- "WrongID_DiffRegMax"
type <- "UniquePeps_Shared_Big_LargerDiff"
benchs <- read.csv(paste0("allBenchmarks_", type, ".csv"))
allbenchs <- rbind(allbenchs, benchs)
intersection(colnames(allbenchs), colnames(benchs))
intersect(colnames(allbenchs), colnames(benchs))
length(colnames(benchs))
length(colnames(allbenchs))
?intersect
setdiff(colnames(allbenchs), colnames(benchs))
setdiff(colnames(allbenchs), colnames(benchs))
setdiff(names(allbenchs), names(benchs))
union(names(allbenchs), names(benchs))
intersect(names(allbenchs), names(benchs))
duplicated(intersect(names(allbenchs), names(benchs)) , union(names(allbenchs), names(benchs)))
duplicated(c(names(allbenchs),names(benchs)))
duplicated(sort(c(names(allbenchs),names(benchs))))
duplicated(c(names(allbenchs),names(benchs)))
(c(names(allbenchs),names(benchs)))[114]
benchs$propMisCleavedPeps.5 <- NULL
allbenchs <- rbind(allbenchs, benchs)
ProteoMaker::visualize_benchmarks(benchs, 1:45, ref_par = simvar[1], errorbar = F)
# MinUniquePep
# benchsRed <- benchs[benchs$SharedPep,]
ProteoMaker::visualize_benchmarks(benchs, c(18, 21, 22, 23, 26, 27, 29, 30), ref_par = simvar[1])
# MinUniquePep
# benchsRed <- benchs[benchs$SharedPep,]
ProteoMaker::visualize_benchmarks(allbenchs, c(18, 21, 22, 23, 26, 27, 29, 30), ref_par = simvar[1])
# MinUniquePep
# benchsRed <- benchs[benchs$SharedPep,]
ProteoMaker::visualize_benchmarks(allbenchs, c(18), ref_par = simvar[1])
# MinUniquePep
# benchsRed <- benchs[benchs$SharedPep,]
ProteoMaker::visualize_benchmarks(allbenchs, c(18, 21, 22, 23, 26, 27, 29, 30), ref_par = simvar[1], fullrange = T)
# get benchmarks
# type <- "test"
# type <- "WrongIDs_Multi"
# type <- "DiffReg_New"
# type <- "MisCleav_Multi"
# type <- "MisCleav_PepLength_New"
#type <- "SeqLength"
# type <- "NumReps_New"
# type <- "ExpressedProt"
# type <- "WrongID_DiffRegMax"
type <- "UniquePeps_Shared_Big_LargerDiff"
# simvar <- c("WrongIDs")
# simvar <- c("PropMissedCleavages")
# simvar <- c("PropMissedCleavages","PepMaxLength")
#simvar <- "PepMaxLength"
# simvar <- "PercExpressedProt"
# simvar <- "NumReps"
# simvar <- c("DiffRegFrac", "DiffRegMax")
simvar <- c("MinUniquePep", "SharedPep")
benchs <- read.csv(paste0("allBenchmarks_", type, ".csv"))
ProteoMaker::visualize_benchmarks(benchs, 1:45, ref_par = c(simvar[1], simvar[2]), errorbar = F)
ProteoMaker::visualize_benchmarks(benchs, 1:45, ref_par = simvar[1], errorbar = F)
# Miscleavages
benchsRed <- benchs[benchs$PepMaxLength == 50,]
ProteoMaker::visualize_benchmarks(benchsRed, c(1:3, 11, 13, 17, 18, 21) , ref_par = simvar[1])
# WrongIDs
ProteoMaker::visualize_benchmarks(benchs, c(2, 18, 22, 24) , ref_par = simvar[1])
# PepMaxLength
benchsRed <- benchs[benchs$PropMissedCleavages == 0.2,]
ProteoMaker::visualize_benchmarks(benchsRed, c(1:3, 11, 18, 21) , ref_par = simvar[2], fullrange = F)
# MinUniquePep
# benchsRed <- benchs[benchs$SharedPep,]
ProteoMaker::visualize_benchmarks(benchs, c(18, 21, 22, 23, 26, 27, 29, 30), ref_par = simvar[1])
benchs$PercExpressedProt
benchs$SharedPep
dim(benchs)
names(benchs)
diffbench <- benchs
diffbench[1:31,1:47] <- diffbench[2:32, 1:47] - diffbench[1:31, 1:47]
diffbench[1:31,1:47] <- as.numeric(diffbench[2:32, 1:47]) - as.numeric(diffbench[1:31, 1:47])
as.numeric(diffbench[2:32, 1:47])
diffbench[2:32, 1:47]
sapply(diffbench, class)
diffbench[1:31,1:47] <- as.numeric(diffbench[2:32, c(18, 21, 22, 23, 26, 27, 29, 30) ]) - as.numeric(diffbench[1:31,  c(18, 21, 22, 23, 26, 27, 29, 30)])
diffbench[1:31,1:47] <- (diffbench[2:32, c(18, 21, 22, 23, 26, 27, 29, 30) ]) - (diffbench[1:31,  c(18, 21, 22, 23, 26, 27, 29, 30)])
diffbench <- diffbench[benchs$SharedPep,]
# MinUniquePep
# benchsRed <- benchs[benchs$SharedPep,]
ProteoMaker::visualize_benchmarks(benchs, c(18, 21, 22, 23, 26, 27, 29, 30), ref_par = simvar[1])
# MinUniquePep
# benchsRed <- benchs[benchs$SharedPep,]
ProteoMaker::visualize_benchmarks(diffbench, c(18, 21, 22, 23, 26, 27, 29, 30), ref_par = simvar[1])
diffbench <- benchs
diffbench[1:31,1:47] <- (diffbench[2:32, c(18, 21, 22, 23, 26, 27, 29, 30) ]) - (diffbench[1:31,  c(18, 21, 22, 23, 26, 27, 29, 30)])
diffbench <- benchs
diffbench[1:31,c(18, 21, 22, 23, 26, 27, 29, 30)] <- (diffbench[2:32, c(18, 21, 22, 23, 26, 27, 29, 30) ]) - (diffbench[1:31,  c(18, 21, 22, 23, 26, 27, 29, 30)])
# MinUniquePep
# benchsRed <- benchs[benchs$SharedPep,]
ProteoMaker::visualize_benchmarks(diffbench, c(18, 21, 22, 23, 26, 27, 29, 30), ref_par = simvar[1])
diffbench <- diffbench[benchs$SharedPep,]
# MinUniquePep
# benchsRed <- benchs[benchs$SharedPep,]
ProteoMaker::visualize_benchmarks(diffbench, c(18, 21, 22, 23, 26, 27, 29, 30), ref_par = simvar[1])
diffbench <- benchs
diffbench[1:31,c(18, 21, 22, 23, 26, 27, 29, 30)] <- (diffbench[2:32, c(18, 21, 22, 23, 26, 27, 29, 30) ]) - (diffbench[1:31,  c(18, 21, 22, 23, 26, 27, 29, 30)])
diffbench$numQuantProtGroups
bench$numQuantProtGroups
benchs$numQuantProtGroups
diffbench <- benchs
diffbench[1:31,c(18)] <- (diffbench[2:32, 18 ]) - (diffbench[1:31,  18])
diffbench$numQuantProtGroups
diffbench$numQuantProtGroups[1:31] <- diffbench$numQuantProtGroups[2:32] - diffbench$numQuantProtGroups[1:31]
diffbench$numQuantProtGroups
diffbench$numQuantProtGroups
diffbench <- benchs
diffbench[1:31,c(18, 21, 22, 23, 26, 27, 29, 30)] <- (diffbench[2:32, c(18, 21, 22, 23, 26, 27, 29, 30) ]) - (diffbench[1:31,  c(18, 21, 22, 23, 26, 27, 29, 30)])
diffbench$numQuantProtGroups
for (i in c(18, 21, 22, 23, 26, 27, 29, 30)) diffbench[1:31, i] <- diffbench[2:32, i] - diffbench[1:31, i]
diffbench$numQuantProtGroups
diffbench[2:32, i]
diffbench[1:31, i]
diffbench$numQuantProtGroups
diffbench[,18]
names(diffbench)
diffbench <- benchs
diffbench[1:31,c(24, 28, 29, 30, 31, 34, 36, 37)] <- (diffbench[2:32, c(24, 28, 29, 30, 31, 34, 36, 37)]) - (diffbench[1:31,  c(24, 28, 29, 30, 31, 34, 36, 37)])
# MinUniquePep
# benchsRed <- benchs[benchs$SharedPep,]
ProteoMaker::visualize_benchmarks(diffbench, c(18, 21, 22, 23, 26, 27, 29, 30), ref_par = simvar[1])
diffbench <- diffbench[diffbench$SharedPep,]
# MinUniquePep
# benchsRed <- benchs[benchs$SharedPep,]
ProteoMaker::visualize_benchmarks(diffbench, c(18, 21, 22, 23, 26, 27, 29, 30), ref_par = simvar[1])
diffbench[1:31,c(24, 28, 29, 30, 31, 34, 36, 37)] <- - diffbench[1:31,c(24, 28, 29, 30, 31, 34, 36, 37)]
# MinUniquePep
# benchsRed <- benchs[benchs$SharedPep,]
ProteoMaker::visualize_benchmarks(diffbench, c(18, 21, 22, 23, 26, 27, 29, 30), ref_par = simvar[1])
plot(diffbench$MinUniquePep, diffbench$numQuantProtGroups)
plot(diffbench$MinUniquePep, diffbench$numQuantProtGroups, xlab = "Min. unique peptides per protein", ylab = "Diff. quantified protein groups")
plot(diffbench$MinUniquePep, diffbench$numQuantProtGroups, xlab = "Min. unique peptides per protein", ylab = "Diff. quantified protein groups", type = "l")
plot(diffbench$MinUniquePep, diffbench$numQuantProtGroups, xlab = "Min. unique peptides per protein", ylab = "Diff. quantified protein groups", type = "b")
plot(diffbench$MinUniquePep, diffbench$numQuantProtGroups, xlab = "Min. unique peptides per protein", ylab = "Diff. quantified protein groups", type = "b", pch = 15)
pdf("t.pdf", height=2, width=1.5)
plot(diffbench$MinUniquePep, diffbench$numQuantProtGroups, xlab = "Min. unique peptides per protein", ylab = "Diff. quantified protein groups", type = "b", pch = 15)
dev.off()
pdf("t.pdf", height=2, width=4)
dev.off()
pdf("t.pdf", height=2, width=4)
plot(diffbench$MinUniquePep, diffbench$numQuantProtGroups, xlab = "Min. unique peptides per protein", ylab = "Diff. quantified protein groups", type = "b", pch = 15)
dev.off()
pdf("t.pdf", height=2.5, width=4)
plot(diffbench$MinUniquePep, diffbench$numQuantProtGroups, xlab = "Min. unique peptides per protein", ylab = "Diff. quantified protein groups", type = "b", pch = 15)
dev.off()
pdf("t.pdf", height=2.5, width=4)
plot(diffbench$MinUniquePep, diffbench$meanPepPerProt, xlab = "Min. unique peptides per protein", ylab = "Shared vs unique", type = "b", pch = 15)
dev.off()
pdf("t.pdf", height=2.5, width=4)
plot(diffbench$MinUniquePep, diffbench$aucDiffRegProteins.FDR_PolySTest.2.vs.1.AUC, xlab = "Min. unique peptides per protein", ylab = "Shared vs unique", type = "b", pch = 15)
dev.off()
pdf("t.pdf", height=2.5, width=4)
plot(diffbench$MinUniquePep, diffbench$tprProt0.01.FDR_PolySTest.2.vs.1.TPR, xlab = "Min. unique peptides per protein", ylab = "Shared vs unique", type = "b", pch = 15)
dev.off()
pdf("t.pdf", height=2.5, width=4)
plot(diffbench$MinUniquePep, diffbench$tFDRProt0.05.FDR_PolySTest.2.vs.1.tFDR, xlab = "Min. unique peptides per protein", ylab = "Shared vs unique", type = "b", pch = 15)
dev.off()
pdf("t.pdf", height=2.5, width=4)
plot(diffbench$MinUniquePep, diffbench$meanSquareDiffFCProt, xlab = "Min. unique peptides per protein", ylab = "Shared vs unique", type = "b", pch = 15)
dev.off()
pdf("t.pdf", height=2.5, width=4)
plot(diffbench$MinUniquePep, diffbench$propMisCleavedProts, xlab = "Min. unique peptides per protein", ylab = "Shared vs unique", type = "b", pch = 15)
dev.off()
pdf("t.pdf", height=2.5, width=4)
plot(diffbench$MinUniquePep, diffbench$propDiffRegWrongIDProt0.01.FDR_PolySTest.2.vs.1, xlab = "Min. unique peptides per protein", ylab = "Shared vs unique", type = "b", pch = 15)
dev.off()
devtools::load_all()
devtools::test(filter = "gather_all_sims", stop_on_failure = TRUE)
devtools::test(filter = "gather_all_sims", stop_on_failure = TRUE)
devtools::test(filter = "gather_all_sims", stop_on_failure = TRUE)
devtools::load_all();devtools::test(filter = "gather_all_sims", stop_on_failure = TRUE)
devtools::load_all();devtools::test(filter = "gather_all_sims", stop_on_failure = TRUE)
devtools::load_all();devtools::test(filter = "gather_all_sims", stop_on_failure = TRUE)
devtools::load_all();devtools::test(filter = "gather_all_sims", stop_on_failure = TRUE)
devtools::load_all();devtools::test(filter = "gather_all_sims", stop_on_failure = TRUE)
devtools::load_all();devtools::test(filter = "gather_all_sims", stop_on_failure = TRUE)
devtools::load_all();devtools::test(filter = "gather_all_sims", stop_on_failure = TRUE)
devtools::load_all();devtools::test(filter = "gather_all_sims", stop_on_failure = TRUE)
devtools::load_all();devtools::test(filter = "gather_all_sims", stop_on_failure = TRUE)
devtools::load_all();devtools::test(filter = "gather_all_sims", stop_on_failure = TRUE)
devtools::load_all();devtools::test(filter = "gather_all_sims", stop_on_failure = TRUE)
devtools::load_all();devtools::test(filter = "gather_all_sims", stop_on_failure = TRUE)
devtools::load_all();devtools::test(filter = "gather_all_sims", stop_on_failure = TRUE)
ls()
q()
