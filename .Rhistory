source("R/00_BatchRunFuncs.R")
visualize_benchmarks(benchmarks)
source("R/00_BatchRunFuncs.R")
visualize_benchmarks(benchmarks)
source("R/00_BatchRunFuncs.R")
visualize_benchmarks(benchmarks)
source("R/00_BatchRunFuncs.R")
visualize_benchmarks(benchmarks)
# Overwrite the default values with the ones you want to test
# You can use multiple values for each parameter that then will be combined for
# all possible combinations in different simulated datasets
# Param$paramGroundTruth$FastaFile <- "fasta_full_yeast.fasta"
Param$paramGroundTruth$NumReps <- c(3:10)
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config)
#####################
## Get the results of an individual simulation
#####################
res <- get_simulation(allBs[[1]]$Param, phosfake_config)
#####################
## Make matrix of benchmarks and save
#####################
benchmarks <- matrix_benchmarks(allBs, phosfake_config)
write.csv(benchmarks, file = paste0(phosfake_config$resultFilePath, "/allBenchmarks.csv"))
#####################
## Visualize the results
#####################
visualize_benchmarks(benchmarks)
dim(benchmarks)
# Overwrite the default values with the ones you want to test
# You can use multiple values for each parameter that then will be combined for
# all possible combinations in different simulated datasets
# Param$paramGroundTruth$FastaFile <- "fasta_full_yeast.fasta"
Param$paramGroundTruth$NumReps <- c(3:7)
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config)
#####################
## Get the results of an individual simulation
#####################
res <- get_simulation(allBs[[1]]$Param, phosfake_config)
#####################
## Make matrix of benchmarks and save
#####################
benchmarks <- matrix_benchmarks(allBs, phosfake_config)
dim(benchmarks)
#####################
## Make matrix of benchmarks and save
#####################
benchmarks <- matrix_benchmarks(allBs, phosfake_config)
write.csv(benchmarks, file = paste0(phosfake_config$resultFilePath, "/allBenchmarks.csv"))
benchmarks
#####################
## Visualize the results
#####################
visualize_benchmarks(benchmarks)
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
#####################
## Visualize the results
#####################
visualize_benchmarks(benchmarks)
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
#####################
## Visualize the results
#####################
visualize_benchmarks(benchmarks)
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
#####################
## Visualize the results
#####################
visualize_benchmarks(benchmarks)
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
#####################
## Visualize the results
#####################
visualize_benchmarks(benchmarks)
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
#####################
## Visualize the results
#####################
visualize_benchmarks(benchmarks)
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
#####################
## Visualize the results
#####################
visualize_benchmarks(benchmarks)
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
#####################
## Visualize the results
#####################
visualize_benchmarks(benchmarks)
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
#####################
## Visualize the results
#####################
visualize_benchmarks(benchmarks)
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
range(1:2)
range(c(1,5))
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
#####################
## Visualize the results
#####################
visualize_benchmarks(benchmarks)
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
#####################
## Visualize the results
#####################
visualize_benchmarks(benchmarks)
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
#####################
## Visualize the results
#####################
visualize_benchmarks(benchmarks)
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
#####################
## Visualize the results
#####################
visualize_benchmarks(benchmarks)
dim(BenchMatrix)
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
#####################
## Visualize the results
#####################
visualize_benchmarks(benchmarks)
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
#####################
## Visualize the results
#####################
visualize_benchmarks(benchmarks)
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
#####################
## Visualize the results
#####################
visualize_benchmarks(benchmarks)
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
# Overwrite the default values with the ones you want to test
# You can use multiple values for each parameter that then will be combined for
# all possible combinations in different simulated datasets
# Param$paramGroundTruth$FastaFile <- "fasta_full_yeast.fasta"
Param$paramGroundTruth$NumReps <- c(3:5)
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config)
#####################
## Get the results of an individual simulation
#####################
res <- get_simulation(allBs[[1]]$Param, phosfake_config)
#####################
## Make matrix of benchmarks and save
#####################
benchmarks <- matrix_benchmarks(allBs, phosfake_config)
write.csv(benchmarks, file = paste0(phosfake_config$resultFilePath, "/allBenchmarks.csv"))
#####################
## Visualize the results
#####################
visualize_benchmarks(benchmarks)
# Overwrite the default values with the ones you want to test
# You can use multiple values for each parameter that then will be combined for
# all possible combinations in different simulated datasets
# Param$paramGroundTruth$FastaFile <- "fasta_full_yeast.fasta"
Param$paramGroundTruth$NumReps <- c(3:7)
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config)
#####################
## Get the results of an individual simulation
#####################
res <- get_simulation(allBs[[1]]$Param, phosfake_config)
#####################
## Make matrix of benchmarks and save
#####################
benchmarks <- matrix_benchmarks(allBs, phosfake_config)
write.csv(benchmarks, file = paste0(phosfake_config$resultFilePath, "/allBenchmarks.csv"))
#####################
## Visualize the results
#####################
visualize_benchmarks(benchmarks)
D(1:2)
D(c(1,3))
d(c(1,3))
diff(c(1,3))
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
#####################
## Visualize the results
#####################
visualize_benchmarks(benchmarks)
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
#####################
## Visualize the results
#####################
visualize_benchmarks(benchmarks)
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
#####################
## Visualize the results
#####################
visualize_benchmarks(benchmarks)
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
#####################
## Visualize the results
#####################
visualize_benchmarks(benchmarks)
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
#####################
## Visualize the results
#####################
visualize_benchmarks(benchmarks)
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
#####################
## Visualize the results
#####################
visualize_benchmarks(benchmarks)
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
#####################
## Visualize the results
#####################
visualize_benchmarks(benchmarks)
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
#####################
## Visualize the results
#####################
visualize_benchmarks(benchmarks)
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
#####################
## Visualize the results
#####################
visualize_benchmarks(benchmarks)
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
#####################
## Visualize the results
#####################
visualize_benchmarks(benchmarks)
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
#####################
## Visualize the results
#####################
visualize_benchmarks(benchmarks)
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
#####################
## Visualize the results
#####################
visualize_benchmarks(benchmarks)
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
#####################
## Visualize the results
#####################
visualize_benchmarks(benchmarks)
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
#####################
## Visualize the results
#####################
visualize_benchmarks(benchmarks)
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
#####################
## Visualize the results
#####################
visualize_benchmarks(benchmarks)
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
#####################
## Visualize the results
#####################
# visualize the benchmarks and parameters of the second simulation
visualize_benchmarks(benchmarks, 2)
# Set the working directory to the path of this file
# You can use the following line when you are using RStudio
path <- dirname(rstudioapi::getActiveDocumentContext()$path)
################################################################################
#                       Run PhosFake                                           #
################################################################################
#####################
## Install PhosFake libraries
#####################
# install_phosfake()
#####################
## Load main functions
#####################
# You need to set the path to where the PhosFake (and this file) package is located
# get path of this file
path <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(path)
#####################
## Load main functions
#####################
# You need to set the path to where the PhosFake (and this file) package is located
# get path of this file
path <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(path)
source("R/00_BatchRunFuncs.R")
#####################
## Load PhosFake libraries and source files
#####################
load_phosfake()
#####################
## Paths and directories
#####################
phosfake_config <- set_phosfake(fastaFilePath = "Proteomes", resultFilePath = "SimulatedDataSets", cores = 8, clusterType = "FORK", calcAllBenchmarks = T)
#####################
## Create default list of testing parameters
#####################
Param <- def_param()
# Overwrite the default values with the ones you want to test
# You can use multiple values for each parameter that then will be combined for
# all possible combinations in different simulated datasets
# Param$paramGroundTruth$FastaFile <- "fasta_full_yeast.fasta"
Param$paramGroundTruth$NumReps <- c(3:7)
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config)
#####################
## Get the results of an individual simulation
#####################
res <- get_simulation(allBs[[1]]$Param, phosfake_config)
#####################
## Make matrix of benchmarks and save
#####################
benchmarks <- matrix_benchmarks(allBs, phosfake_config)
write.csv(benchmarks, file = paste0(phosfake_config$resultFilePath, "/allBenchmarks.csv"))
#####################
## Visualize the results
#####################
# visualize the benchmarks and parameters of the second simulation
visualize_benchmarks(benchmarks, 2)
# Run the simulations
allBs <- run_sims(Param, phosfake_config)
# Configure the paths and settings
phosfake_config <- set_phosfake(
fastaFilePath = "Proteomes",
resultFilePath = "SimulatedDataSets",
cores = 8,
clusterType = "FORK",
calcAllBenchmarks = TRUE
)
# Set the working directory to the path of this file
# You can use the following lines when you are using RStudio
#path <- dirname(rstudioapi::getActiveDocumentContext()$path)
#setwd(path)
# Source the main functions
source("R/00_BatchRunFuncs.R")
# Install the packages. Uncomment if you have not installed the packages yet
#install_phosfake()
# Load the PhosFake libraries
load_phosfake()
# Configure the paths and settings
phosfake_config <- set_phosfake(
fastaFilePath = "Proteomes",
resultFilePath = "SimulatedDataSets",
cores = 8,
clusterType = "FORK",
calcAllBenchmarks = TRUE
)
# Generate default parameters
Param <- def_param()
# Example of overwriting default values
Param$paramGroundTruth$NumReps <- c(3:5)
# Param$paramGroundTruth$NumCond <- 2
# Param$paramProteoformAb$QuantNoise <- seq(0.1, 0.9, 0.5)
# Param$paramProteoformAb$DiffRegFrac <- c(0.1, 0.3, 0.5)
# Param$paramProteoformAb$DiffRegMax <- seq(0.5, 2, 0.5)
# Param$paramDigest$Enzyme <- "trypsin"
# Param$paramDigest$PropMissedCleavages <- 0.01
# Param$paramDigest$MaxNumMissedCleavages <- 4
# Param$paramDigest$PepMinLength <- 7
# Param$paramDigest$PepMaxLength <- 30
# Param$paramMSRun$PercDetectedPep <- seq(0.1, 0.5, 0.1)
# Run the simulations
allBs <- run_sims(Param, phosfake_config)
# Run the simulations
allBs <- run_sims(Param, phosfake_config)
res
# Generate the benchmark matrix
benchmarks <- matrix_benchmarks(allBs, phosfake_config)
write.csv(benchmarks, file = paste0(phosfake_config$resultFilePath, "/allBenchmarks.csv"))
# visualize the benchmarks and parameters of the second simulation
visualize_benchmarks(benchmarks, 2)
dev.off()
dev.off()
visualize_benchmarks(benchmarks, 2)
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
visualize_benchmarks(benchmarks, 2)
# Set the working directory to the path of this file
# You can use the following lines when you are using RStudio
#path <- dirname(rstudioapi::getActiveDocumentContext()$path)
#setwd(path)
# Source the main functions
source("R/00_BatchRunFuncs.R")
# Install the packages. Uncomment if you have not installed the packages yet
#install_phosfake()
# Load the PhosFake libraries
load_phosfake()
# Configure the paths and settings
phosfake_config <- set_phosfake(
fastaFilePath = "Proteomes",
resultFilePath = "SimulatedDataSets",
cores = 8,
clusterType = "FORK",
calcAllBenchmarks = TRUE
)
# Generate default parameters
Param <- def_param()
# Example of overwriting default values
Param$paramGroundTruth$NumReps <- c(3:5)
# Param$paramGroundTruth$NumCond <- 2
# Param$paramProteoformAb$QuantNoise <- seq(0.1, 0.9, 0.5)
# Param$paramProteoformAb$DiffRegFrac <- c(0.1, 0.3, 0.5)
# Param$paramProteoformAb$DiffRegMax <- seq(0.5, 2, 0.5)
# Param$paramDigest$Enzyme <- "trypsin"
# Param$paramDigest$PropMissedCleavages <- 0.01
# Param$paramDigest$MaxNumMissedCleavages <- 4
# Param$paramDigest$PepMinLength <- 7
# Param$paramDigest$PepMaxLength <- 30
# Param$paramMSRun$PercDetectedPep <- seq(0.1, 0.5, 0.1)
# Run the simulations
allBs <- run_sims(Param, phosfake_config)
# Retrieve results}
res <- get_simulation(allBs[[1]]$Param, phosfake_config)
# Generate the benchmark matrix
benchmarks <- matrix_benchmarks(allBs, phosfake_config)
write.csv(benchmarks, file = paste0(phosfake_config$resultFilePath, "/allBenchmarks.csv"))
# visualize the benchmarks and parameters of the second simulation
visualize_benchmarks(benchmarks, 2)
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
#####################
## Visualize the results
#####################
# visualize the benchmarks and parameters of the second simulation
visualize_benchmarks(benchmarks, 2)
warnings()
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
warnings()
#####################
## Visualize the results
#####################
# visualize the benchmarks and parameters of the second simulation
visualize_benchmarks(benchmarks, 2)
warnings()
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
#####################
## Visualize the results
#####################
# visualize the benchmarks and parameters of the second simulation
visualize_benchmarks(benchmarks, 2)
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
#####################
## Visualize the results
#####################
# visualize the benchmarks and parameters of the second simulation
visualize_benchmarks(benchmarks, 2)
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
#####################
## Visualize the results
#####################
# visualize the benchmarks and parameters of the second simulation
visualize_benchmarks(benchmarks, 2)
warnings()
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
warnings()
#####################
## Visualize the results
#####################
# visualize the benchmarks and parameters of the second simulation
visualize_benchmarks(benchmarks, 2)
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
#####################
## Visualize the results
#####################
# visualize the benchmarks and parameters of the second simulation
visualize_benchmarks(benchmarks, 2)
warnings()
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
#####################
## Visualize the results
#####################
# visualize the benchmarks and parameters of the second simulation
visualize_benchmarks(benchmarks, 2)
source("~/devel/Bioinformatics/EuBIC/PhosFake/R/00_BatchRunFuncs.R")
