x
y <- exp(4*x)
plot(x, y)
?rnorm
plot(x, dnorm(x))
x <- seq(-3, 3, 0.01)
plot(x, dnorm(x))
plot(x, pnorm(x))
plot(x, qnorm(x))
x <- seq(0, 1, 0.01)
plot(x, qnorm(x))
plot(x, rnorm(x))
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(100)
plot(rnorm(100))
plot(rnorm(100))
hist(rnorm(10000))
hist(runif(10000))
hist(rbinom(10000))
hist(rbinom(10000, size = 10))
hist(rbinom(10000, prob=0.5))
hist(rbinom(10000, prob=0.5, size=10))
hist(rbinom(10000, prob=0.5, size=10), 100)
L <- LETTERS
L
L <- LETTERS
L
B <- c("F", "f")
L %in% B
L[L %in% B]
B[B %in% L]
B %in% L
intersect(B, L)
union(B,L)
all <- union(B,L)
duplicated(all)
all <- c(B,L)
all
all <- c(B,L,"F")
all
duplicated(all)
which(duplicated(all))
unique(all)
rep1 <- read.csv("Teaching/BiostatisticsInRI/Replicate 1.csv")
rep2 <- read.csv("Teaching/BiostatisticsInRI/Replicate 2.csv")
head(rep1)
head(rep2)
dim(rep1)
dim(rep2)
merged <- merge(rep1, rep2, by="Sequence")
head(merged)
dim(merged)
sum(duplicated(rep1$Sequence))
rep1_c <- rep1[!duplicated(rep1$Sequence)       ,    ]
rep2_c <- rep2[!duplicated(rep2$Sequence)       ,    ]
dim(rep1_c)
merged <- merge(rep1_c, rep2_c, by="Sequence")
merged
dim(merged)
merged
View(merged)
merged <- merge(rep1_c, rep2_c, by="Sequence", all=T)
dim(merged)
View(merged)
rep1$X114
table(rep1$Protein.Group.Accessions)
by(rep1$X114, rep1$Protein.Group.Accessions, mean)
by(rep1$X114, rep1$Protein.Group.Accessions, mean, na.rm=T)
View(rep1)
library(matrixStats)
by(rep1, rep1$Protein.Group.Accessions, function(y) {colMeans(y[4:7])})
by(rep1, rep1$Protein.Group.Accessions, function(y) {colMeans(y[4:7], na.rm=T)})
apply(rep1, 1, sum)
apply(rep1[, 4:7] , 1, sum)
apply(rep1[, 4:7] , 1, sum, na.rm=T)
apply(rep1[, 4:7] , 2, sum, na.rm=T)
lapply(rep1[, 4:7] , sum, na.rm=T)
sapply(rep1[, 4:7] , sum, na.rm=T)
tapply(rep1[, 4:7] , sum, na.rm=T)
paste(LETTERS[1:5], 5:12)
rep(1:5, 2, each=T)
paste(c("C","T"), rep(1:5, each=F))
rep(1:5, each=F)
?reporter
?rep
plot(1:10)
plot(1:10)
plot(1:10)
library(lattice)
gene.values <- c(-0.156779906618839, -1.19258492462641, -0.584097898869027,
-1.05973269590046, 0.241034604602436, 0.622092984491641, 0.429889283129897,
1.21134263252275)
rep(c("A","B", each=4)
)
rep(c("A","B"), each=4)
plot(genes ~ conditions, my.dat)
library(lattice)
gene.values <- c(-0.156779906618839, -1.19258492462641, -0.584097898869027,
-1.05973269590046, 0.241034604602436, 0.622092984491641, 0.429889283129897,
1.21134263252275)
my.dat <- data.frame(genes=gene.values, condition=rep(c("A","B"), each=4))
plot(genes ~ conditions, my.dat)
my.dat <- data.frame(genes=gene.values, condition=rep(c("A","B"), each=4))
plot(genes ~ condition, my.dat)
stripplot(genes ~ condition, my.dat)
means <- by(my.dat$genes, my.dat$condition, mean)
means
sds <- by(my.dat$genes, my.dat$condition, sds)
sds <- by(my.dat$genes, my.dat$condition, sd)
sds
m_sds <- mean(sds)
tval <- (means[1] - means[2]) / m_sds * sqrt(16/8)
x <- seq(-5,5, 0.01)
plot(x, dt(x, df = 6))
plot(x, dt(x, df = 6), type="l")
tval
abline(v=c(-tval,tval))
abline(h=0)
pt(tval, df=6)
2* pt(tval, df=6)
t.test(gene.values[1:4], gene.values[5:8], var.equal = T)
lm.out(genes ~ condition, my.dat)
lm.out(genes ~ condition, my.data)
lm.out <- lm(genes ~ condition, my.data)
lm.out <- lm(genes ~ condition, my.dat)
summary(lm.out)
data("ToothGrowth")
?ToothGrowth
sapply(ToothGrowth, class)
ToothGrowth$dose <- as.factor(ToothGrowth$dose)
sapply(ToothGrowth, class)
interaction.plot(ToothGrowth$supp, ToothGrowth$dose, ToothGrowth$len)
lm.out <- lm(len ~ supp + dose, ToothGrowth)
summary(lm.out)
lm.out <- lm(len ~ supp * dose, ToothGrowth)
summary(lm.out)
lm.out <- lm(len ~ supp + dose, ToothGrowth)
summary(lm.out)
lm.out2 <- lm(len ~ supp * dose, ToothGrowth)
summary(lm.out)
anova(lm.out, lm.out2)
lm.out2 <- lm(len ~ supp * dose, ToothGrowth)
summary(lm.out2)
plot(1:10)
vec <- vector(,6)
rownames(vec) <- c("MaxQuant", "OpenMS", "Proline", "TPP", "ProteomeDiscoverer", "Compomics")
vec <- c(190/60, 7.8, 17.6, 7.75, 8.3, 30.8)
barplot(vec, border=NA, col="#B03361")
vec <- c(190/60, 7.8, 17.6, 7.75, 8.3, 30.8)
rownames(vec) <- c("MaxQuant", "OpenMS", "Proline", "TPP", "ProteomeDiscoverer", "Compomics")
barplot(vec, border=NA, col="#B03361")
vec <- c(190/60, 7.8, 17.6, 7.75, 8.3, 30.8)
rownames(vec) <- c("MaxQuant", "OpenMS", "Proline", "TPP", "ProteomeDiscoverer", "Compomics")
names(vec) <- c("MaxQuant", "OpenMS", "Proline", "TPP", "ProteomeDiscoverer", "Compomics")
barplot(vec, border=NA, col="#B03361")
barplot(vec, border=NA, col="#B03361",las=2)
barplot(vec, border=NA, col="#D03361",las=2)
barplot(vec, border=NA, col="#D077A1",las=2)
barplot(vec, border=NA, col="#D033A1",las=2)
barplot(vec, border=NA, col="#D0A133",las=2)
barplot(vec, border=NA, col="#D033A1",las=2)
barplot(vec, border=NA, col="#D055A1",las=2)
barplot(vec, border=NA, col="#E055A1",las=2)
pdf("t.pdf")
barplot(vec, border=NA, col="#E055A1",las=2)
dev.off()
getwd()
shiny::runApp('devel/Bioinformatics/DataAnalysis/ShinyApps/CoExpresso')
mart <- useMart("ensembl",dataset="hsapiens_gene_ensembl")
runApp('devel/Bioinformatics/DataAnalysis/ShinyApps/CoExpresso')
runApp('devel/Bioinformatics/DataAnalysis/ShinyApps/CoExpresso')
runApp('devel/Bioinformatics/DataAnalysis/ShinyApps/CoExpresso')
browseVignettes("biomaRt")
listMarts()
runApp('devel/Bioinformatics/DataAnalysis/ShinyApps/CoExpresso')
runApp('devel/Bioinformatics/DataAnalysis/ShinyApps/CoExpresso')
dat <- "/tmp/20190104_QE6_nLC6_MM_QC_MNT_HELA_01_190107120859.xlsx"
# reading data from tables
protlist <- readxl::read_xlsx(dat, sheet="Protein sets")
modpep <- readxl::read_xlsx(dat, sheet="Quantified peptide ions")
psms <- readxl::read_xlsx(dat, sheet="Best PSM from protein sets")
# if both files are non-zero
if (!is.null(modpep) & !is.null(protlist)) {
try({
MQout <- readProline(psms, modpep, protlist)
allPeps <- MQout$allPeps
Prots <- MQout$Prots
Param <- MQout$Param
Benchmarks <- NULL
rownames(allPeps) <- paste0("pep", 1:nrow(allPeps))
if (withGroundTruth) {
Stats <- runPolySTest(Prots, Param, refCond=1, onlyLIMMA=F)
# much faster with only LIMMA tests
StatsPep <- runPolySTest(allPeps, Param, refCond=1, onlyLIMMA=T)
Benchmarks <- calcBenchmarks(Stats, StatsPep, Param)
} else {
Benchmarks <- calcBasicBenchmarks(Prots, allPeps, Param)
}
### Get additional benchmarks only for experimental data
## Max. difference retention time
Benchmarks$globalBMs$diffRetentionTime <- diff(range(MQout$allPeps$Retention.time))
## Number of accepted PSMs (count scan numbers)
Benchmarks$globalBMs$acceptedPSMs <- sum(MQout$allPeps$MS.MS.Count)
dat <- basename(dat)
save(Benchmarks, Prots, allPeps, Param, tdat, file =paste0("benchmarks_",dat, ".RData") )
})
}
head(Prots)
allPeps <- MQout$allPeps
Prots <- MQout$Prots
Param <- MQout$Param
MQout <- readProline(psms, modpep, protlist)
library(moments)
library(readxl)
library(stringr)
source ("06_Benchmarks.R")
setwd("~/devel/Bioinformatics/EuBIC/PhosFake")
library(moments)
library(readxl)
library(stringr)
source ("06_Benchmarks.R")
############ Call the function to load and prepare data, and then to calculate the benchmarks
### It is now adopted to a set of zip files in a given folder
library(jsonlite)
# reading data from tables
protlist <- readxl::read_xlsx(dat, sheet="Protein sets")
modpep <- readxl::read_xlsx(dat, sheet="Quantified peptide ions")
psms <- readxl::read_xlsx(dat, sheet="Best PSM from protein sets")
MQout <- readProline(psms, modpep, protlist)
allPeps <- MQout$allPeps
Prots <- MQout$Prots
Param <- MQout$Param
head(Prots)
Benchmarks <- calcBasicBenchmarks(Prots, allPeps, Param)
Benchmarks
Benchmarks$globalBMs$propUniquePep
allPeps$Accession
MQout <- readProline(psms, modpep, protlist)
allPeps <- MQout$allPeps
Prots <- MQout$Prots
Param <- MQout$Param
Benchmarks <- NULL
Benchmarks <- calcBasicBenchmarks(Prots, allPeps, Param)
allPeps$Accession
source ("06_Benchmarks.R")
MQout <- readProline(psms, modpep, protlist)
allPeps <- MQout$allPeps
Prots <- MQout$Prots
Param <- MQout$Param
Benchmarks <- NULL
rownames(allPeps) <- paste0("pep", 1:nrow(allPeps))
Benchmarks <- calcBasicBenchmarks(Prots, allPeps, Param)
Benchmarks$globalBMs$propUniquePep
allPeps
head(allPeps)
MQout <- readProline(psms, modpep, protlist)
allPeps <- MQout$allPeps
allPeps$Sequence
allPeps$PTMType
allPeps$PTMPos
allPeps$PTMType
allPeps$modifications
library(moments)
library(readxl)
library(stringr)
source ("06_Benchmarks.R")
# reading data from tables
protlist <- readxl::read_xlsx(dat, sheet="Protein sets")
modpep <- readxl::read_xlsx(dat, sheet="Quantified peptide ions")
psms <- readxl::read_xlsx(dat, sheet="Best PSM from protein sets")
MQout <- readProline(psms, modpep, protlist)
allPeps <- MQout$allPeps
Prots <- MQout$Prots
Param <- MQout$Param
Benchmarks <- NULL
rownames(allPeps) <- paste0("pep", 1:nrow(allPeps))
head(allPeps)
allPeps$Modifications
library(moments)
library(readxl)
library(stringr)
source ("06_Benchmarks.R")
# reading data from tables
protlist <- readxl::read_xlsx(dat, sheet="Protein sets")
modpep <- readxl::read_xlsx(dat, sheet="Quantified peptide ions")
psms <- readxl::read_xlsx(dat, sheet="Best PSM from protein sets")
MQout <- readProline(psms, modpep, protlist)
allPeps <- MQout$allPeps
Prots <- MQout$Prots
Param <- MQout$Param
Benchmarks <- NULL
rownames(allPeps) <- paste0("pep", 1:nrow(allPeps))
Benchmarks <- calcBasicBenchmarks(Prots, allPeps, Param)
head(allPeps)
allPeps$Modifications
Benchmarks
Prots$num_accs
sum(is.na(Prots$num_accs))
# reading data from tables
protlist <- readxl::read_xlsx(dat, sheet="Protein sets")
modpep <- readxl::read_xlsx(dat, sheet="Quantified peptide ions")
psms <- readxl::read_xlsx(dat, sheet="Best PSM from protein sets")
which(is.na(Prots$num_accs))
Prots[1927,]
rownames(Prots)[1927]
rownames(Prots)[1925:1930]
Prots[1927,"Accession"]
Prots[1927,]
protlist[1927,]
x <- protlist[1927,]
gsub(" ","",unlist(c(strsplit(x["samesets_accessions"], ";"), strsplit(x["subsets_accessions"], ";"))))
Prots <- as.data.frame(protlist)
x <- Prots[1927,]
gsub(" ","",unlist(c(strsplit(x["samesets_accessions"], ";"), strsplit(x["subsets_accessions"], ";"))))
x
x$samesets_accessions
x$subsets_accessions
x$subsets_accession
x$subset_accessions
x$subsets_accessions
Prots$subsets_accessions
gsub(" ","",unlist(c(strsplit(x["samesets_accessions"], ";"), strsplit(x["subsets_accessions"], ";"))))
apply(Prots, 1, function(x) (gsub(" ","",unlist(c(strsplit(x["samesets_accessions"], ";"), strsplit(x["subsets_accessions"], ";"))))))
apply(Prots, 1, function(x) (gsub(" ","",unlist(c(strsplit(x["samesets_accessions"], ";"), strsplit(x["subsets_accessions"], ";"))))))[[1927]]
Accession <- apply(Prots, 1, function(x) (gsub(" ","",unlist(c(strsplit(x["samesets_accessions"], ";"), strsplit(x["subsets_accessions"], ";"))))))[[1927]]
sapply(Accession, na.omit)
paste(sapply(Accession, na.omit),collapse=";")
Accession <- apply(Prots, 1, function(x) (gsub(" ","",unlist(c(strsplit(x["samesets_accessions"], ";"), strsplit(x["subsets_accessions"], ";"))))))[[1926]]
sapply(Accession, na.omit)
paste(sapply(Accession, na.omit),collapse=";")
Prots$Accession <-  apply(Prots, 1, function(x) (gsub(" ","",unlist(c(strsplit(x["samesets_accessions"], ";"), strsplit(x["subsets_accessions"], ";"))))))
Prots$Accession <- sapply(Prots$Accession, na.omit)
Prots$Accession <- sapply(Prots$Accession, paste, collapse=";")
Prots$Accession[1927]
Prots$Accession[1926]
source ("06_Benchmarks.R")
MQout <- readProline(psms, modpep, protlist)
# reading data from tables
protlist <- readxl::read_xlsx(dat, sheet="Protein sets")
modpep <- readxl::read_xlsx(dat, sheet="Quantified peptide ions")
psms <- readxl::read_xlsx(dat, sheet="Best PSM from protein sets")
MQout <- readProline(psms, modpep, protlist)
allPeps <- MQout$allPeps
Prots <- MQout$Prots
Param <- MQout$Param
Benchmarks <- NULL
rownames(allPeps) <- paste0("pep", 1:nrow(allPeps))
Benchmarks <- calcBasicBenchmarks(Prots, allPeps, Param)
library(moments)
library(readxl)
library(stringr)
source ("06_Benchmarks.R")
# reading data from tables
protlist <- readxl::read_xlsx(dat, sheet="Protein sets")
modpep <- readxl::read_xlsx(dat, sheet="Quantified peptide ions")
psms <- readxl::read_xlsx(dat, sheet="Best PSM from protein sets")
MQout <- readProline(psms, modpep, protlist)
allPeps <- MQout$allPeps
Prots <- MQout$Prots
Param <- MQout$Param
Benchmarks <- NULL
rownames(allPeps) <- paste0("pep", 1:nrow(allPeps))
Benchmarks <- calcBasicBenchmarks(Prots, allPeps, Param)
warnings()
Benchmarks
Prots$Accession <-  apply(Prots, 1, function(x) (gsub(" ","",unlist(c(strsplit(x["samesets_accessions"], ";"), strsplit(x["subsets_accessions"], ";"))))))
Prots$Accession[1295:1230]
Prots$Accession <-  apply(Prots, 1, function(x) (gsub(" ","",unlist(c(strsplit(x["samesets_accessions"], ";"), strsplit(x["subsets_accessions"], ";"))))))
library(moments)
library(readxl)
library(stringr)
source ("06_Benchmarks.R")
# reading data from tables
protlist <- readxl::read_xlsx(dat, sheet="Protein sets")
modpep <- readxl::read_xlsx(dat, sheet="Quantified peptide ions")
psms <- readxl::read_xlsx(dat, sheet="Best PSM from protein sets")
MQout <- readProline(psms, modpep, protlist)
allPeps <- MQout$allPeps
Prots <- MQout$Prots
Param <- MQout$Param
Benchmarks <- NULL
rownames(allPeps) <- paste0("pep", 1:nrow(allPeps))
Prots$Accession
Prots$Accession[1220:1230]
Prots$Accession[1230:1240]
Prots$Accession[1230:1250]
if (withGroundTruth) {
Stats <- runPolySTest(Prots, Param, refCond=1, onlyLIMMA=F)
# much faster with only LIMMA tests
StatsPep <- runPolySTest(allPeps, Param, refCond=1, onlyLIMMA=T)
Benchmarks <- calcBenchmarks(Stats, StatsPep, Param)
} else {
Benchmarks <- calcBasicBenchmarks(Prots, allPeps, Param)
}
Benchmarks <- calcBasicBenchmarks(Prots, allPeps, Param)
Benchmarks
rownames(Prots)[1230:1240]
which(is.na(Prots$num_accs))
rownames(Prots)[1920:1930]
rownames(Prots)[1920:1960]
protlist$accession
tail(protlist$accession)
library(moments)
library(readxl)
library(stringr)
source ("06_Benchmarks.R")
# reading data from tables
protlist <- readxl::read_xlsx(dat, sheet="Protein sets")
modpep <- readxl::read_xlsx(dat, sheet="Quantified peptide ions")
psms <- readxl::read_xlsx(dat, sheet="Best PSM from protein sets")
MQout <- readProline(psms, modpep, protlist)
allPeps <- MQout$allPeps
Prots <- MQout$Prots
Param <- MQout$Param
Benchmarks <- NULL
rownames(allPeps) <- paste0("pep", 1:nrow(allPeps))
Benchmarks <- calcBasicBenchmarks(Prots, allPeps, Param)
Benchmarks
Prots$Accession[1920:1930]
Prots$Accession[1920:1940]
dim(Prots)
dim(protlist)
library(moments)
library(readxl)
library(stringr)
source ("06_Benchmarks.R")
# reading data from tables
protlist <- readxl::read_xlsx(dat, sheet="Protein sets")
modpep <- readxl::read_xlsx(dat, sheet="Quantified peptide ions")
psms <- readxl::read_xlsx(dat, sheet="Best PSM from protein sets")
MQout <- readProline(psms, modpep, protlist)
allPeps <- MQout$allPeps
Prots <- MQout$Prots
Param <- MQout$Param
Benchmarks <- NULL
rownames(allPeps) <- paste0("pep", 1:nrow(allPeps))
Benchmarks <- calcBasicBenchmarks(Prots, allPeps, Param)
dim(Prots)
library(moments)
library(readxl)
library(stringr)
source ("06_Benchmarks.R")
# reading data from tables
protlist <- readxl::read_xlsx(dat, sheet="Protein sets")
modpep <- readxl::read_xlsx(dat, sheet="Quantified peptide ions")
psms <- readxl::read_xlsx(dat, sheet="Best PSM from protein sets")
MQout <- readProline(psms, modpep, protlist)
allPeps <- MQout$allPeps
Prots <- MQout$Prots
source ("06_Benchmarks.R")
# reading data from tables
protlist <- readxl::read_xlsx(dat, sheet="Protein sets")
modpep <- readxl::read_xlsx(dat, sheet="Quantified peptide ions")
psms <- readxl::read_xlsx(dat, sheet="Best PSM from protein sets")
MQout <- readProline(psms, modpep, protlist)
allPeps <- MQout$allPeps
Prots <- MQout$Prots
Prots$MC
tail(Prots$MC)
library(moments)
library(readxl)
library(stringr)
source ("06_Benchmarks.R")
dat <- normalizePath(dat)
samplename <- sub("xlsx","",basename(dat))
m_ind <- grep(samplename, metadata$FileName)
tdat <- NA
# reading data from tables
protlist <- readxl::read_xlsx(dat, sheet="Protein sets")
modpep <- readxl::read_xlsx(dat, sheet="Quantified peptide ions")
psms <- readxl::read_xlsx(dat, sheet="Best PSM from protein sets")
MQout <- readProline(psms, modpep, protlist)
allPeps <- MQout$allPeps
Prots <- MQout$Prots
Param <- MQout$Param
Benchmarks <- NULL
rownames(allPeps) <- paste0("pep", 1:nrow(allPeps))
dim(Prots)
tail(Prots)
library(moments)
library(readxl)
library(stringr)
source ("06_Benchmarks.R")
# reading data from tables
protlist <- readxl::read_xlsx(dat, sheet="Protein sets")
modpep <- readxl::read_xlsx(dat, sheet="Quantified peptide ions")
psms <- readxl::read_xlsx(dat, sheet="Best PSM from protein sets")
MQout <- readProline(psms, modpep, protlist)
allPeps <- MQout$allPeps
Prots <- MQout$Prots
Param <- MQout$Param
Benchmarks <- NULL
rownames(allPeps) <- paste0("pep", 1:nrow(allPeps))
dim(Prots)
head(Prots)
tail(Prots)
library(moments)
library(readxl)
library(stringr)
source ("06_Benchmarks.R")
MQout <- readProline(psms, modpep, protlist)
allPeps <- MQout$allPeps
Prots <- MQout$Prots
Param <- MQout$Param
Benchmarks <- NULL
rownames(allPeps) <- paste0("pep", 1:nrow(allPeps))
Benchmarks <- calcBasicBenchmarks(Prots, allPeps, Param)
Benchmarks
library(MSnbase)
?addIdentificationData
