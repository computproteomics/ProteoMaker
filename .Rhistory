yaml::write_yaml(ttt, "/tmp/t.yaml")
ttt
ttt <- append(ttt, "dd")
yaml::write_yaml(ttt, "/tmp/t.yaml")
ttt <- dd
ttt <- "dd"
yaml::write_yaml(ttt, "/tmp/t.yaml")
yaml::read_yaml("/tmp/parameters.yaml")
tt <- yaml::read_yaml("/tmp/parameters.yaml")
tt$params$PTMTypes
?read_yaml
tt <- yaml::read_yaml("/tmp/parameters.yaml")
tt$params$PTMTypes
runApp('inst/shiny')
Param <- yaml::read_yaml("/tmp/parameters.yaml")
Param
Param <- yaml::read_yaml("/tmp/parameters.yaml")
Param$params$PTMTypes
devtools::load_all()
Param <- PhosFake::def_param("/tmp/parameters.yaml")
Param$paramGroundTruth$PTMTypes
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite =T )
Param$paramGroundTruth$PTMTypesDistr
Param$paramGroundTruth$PTMTypesDistr[[1]]
Param$paramGroundTruth$PTMTypesDistr[[1]] <- 1
Param$paramGroundTruth$PTMTypesDistr
Param$paramGroundTruth$PTMTypesDistr[[1]] <- c(ph=1)
Param$paramGroundTruth$PTMTypesDistr
Param$paramGroundTruth$PTMTypesDistr[[1]]$ph <- c
Param$paramGroundTruth$PTMTypesDistr[[1]]$ph <- 1
Param$paramGroundTruth$PTMTypesDistr
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite =T )
unlist(Param$paramGroundTruth$PTMTypes)
devtools::load_all()
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite =T )
Param$paramGroundTruth$FracModProt
Param$paramGroundTruth$FracModProt <- 1
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite =T )
devtools::load_all()
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite =T )
devtools::load_all()
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite =T )
devtools::load_all()
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite =T )
devtools::load_all()
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite =T )
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite =T )
lapply(unlist(param$PTMTypes)
print)
lapply(unlist(param$PTMTypes), print)
# Sample possible modification sites for each sequence based on the adjusted probability weights and
# size based on a truncated poisson distribution.
selected.modification.sites <- lapply(1:length(possible.modification.sites), function(x) {
if (length(unlist(possible.modification.sites[[x]])) > 1) {
# Over PTM types
setNames(lapply(unlist(param$PTMTypes), function(y) {
# Over modification sites
lapply(seq_len(length(possible.modification.sites[[x]][[y]])), function(z) {
mod_aas <- length(possible.modification.sites[[x]][[y]][[z]])
if(mod_aas == 0) return(NULL)
out <- sample(
x = unlist(possible.modification.sites[[x]][[y]][[z]]),
prob = rep(modification.probability.weight[[x]][[y]][[z]], mod_aas),
size = extraDistr::rtpois(n = 1, lambda = param$PTMMultipleLambda * mod_aas,
a = 1, b = mod_aas)
)
return(out)
})
}),
unlist(param$PTMTypes))
# out <- sort(sample(
#   x = unlist(possible.modification.sites[[x]]),
#   prob = rep(unlist(modification.probability.weight[[x]]),
#              unlist(lapply(possible.modification.sites[[x]], function(y) lengths(y)))),
#   size = extraDistr::rtpois(n = 1, lambda = param$PTMMultipleLambda * length(unlist(possible.modification.sites[[x]])),
#                             a = 1, b = length(unlist(possible.modification.sites[[x]])))
# ))
# return(out)
} else {
return(unlist(possible.modification.sites[[x]]))
}
})
View(selected.modification.sites)
# Sample possible modification sites for each sequence based on the adjusted probability weights and
# size based on a truncated poisson distribution.
selected.modification.sites <- lapply(1:length(possible.modification.sites), function(x) {
if (length(unlist(possible.modification.sites[[x]])) > 1) {
# Over PTM types
setNames(lapply(unlist(param$PTMTypes), function(y) {
print(y)
# Over modification sites
lapply(seq_len(length(possible.modification.sites[[x]][[y]])), function(z) {
mod_aas <- length(possible.modification.sites[[x]][[y]][[z]])
if(mod_aas == 0) return(NULL)
out <- sample(
x = unlist(possible.modification.sites[[x]][[y]][[z]]),
prob = rep(modification.probability.weight[[x]][[y]][[z]], mod_aas),
size = extraDistr::rtpois(n = 1, lambda = param$PTMMultipleLambda * mod_aas,
a = 1, b = mod_aas)
)
return(out)
})
}),
unlist(param$PTMTypes))
# out <- sort(sample(
#   x = unlist(possible.modification.sites[[x]]),
#   prob = rep(unlist(modification.probability.weight[[x]]),
#              unlist(lapply(possible.modification.sites[[x]], function(y) lengths(y)))),
#   size = extraDistr::rtpois(n = 1, lambda = param$PTMMultipleLambda * length(unlist(possible.modification.sites[[x]])),
#                             a = 1, b = length(unlist(possible.modification.sites[[x]])))
# ))
# return(out)
} else {
return(unlist(possible.modification.sites[[x]]))
}
})
# Sample possible modification sites for each sequence based on the adjusted probability weights and
# size based on a truncated poisson distribution.
selected.modification.sites <- lapply(1:length(possible.modification.sites), function(x) {
if (length(unlist(possible.modification.sites[[x]])) > 1) {
# Over PTM types
setNames(lapply(unlist(param$PTMTypes), function(y) {
# Over modification sites
lapply(seq_len(length(possible.modification.sites[[x]][[y]])), function(z) {
print(z)
mod_aas <- length(possible.modification.sites[[x]][[y]][[z]])
if(mod_aas == 0) return(NULL)
out <- sample(
x = unlist(possible.modification.sites[[x]][[y]][[z]]),
prob = rep(modification.probability.weight[[x]][[y]][[z]], mod_aas),
size = extraDistr::rtpois(n = 1, lambda = param$PTMMultipleLambda * mod_aas,
a = 1, b = mod_aas)
)
return(out)
})
}),
unlist(param$PTMTypes))
# out <- sort(sample(
#   x = unlist(possible.modification.sites[[x]]),
#   prob = rep(unlist(modification.probability.weight[[x]]),
#              unlist(lapply(possible.modification.sites[[x]], function(y) lengths(y)))),
#   size = extraDistr::rtpois(n = 1, lambda = param$PTMMultipleLambda * length(unlist(possible.modification.sites[[x]])),
#                             a = 1, b = length(unlist(possible.modification.sites[[x]])))
# ))
# return(out)
} else {
return(unlist(possible.modification.sites[[x]]))
}
})
# Sample possible modification sites for each sequence based on the adjusted probability weights and
# size based on a truncated poisson distribution.
selected.modification.sites <- lapply(1:length(possible.modification.sites), function(x) {
if (length(unlist(possible.modification.sites[[x]])) > 1) {
# Over PTM types
setNames(lapply(unlist(param$PTMTypes), function(y) {
# Over modification sites
lapply(seq_len(length(possible.modification.sites[[x]][[y]])), function(z) {
mod_aas <- length(possible.modification.sites[[x]][[y]][[z]])
print(mod_ass)
if(mod_aas == 0) return(NULL)
out <- sample(
x = unlist(possible.modification.sites[[x]][[y]][[z]]),
prob = rep(modification.probability.weight[[x]][[y]][[z]], mod_aas),
size = extraDistr::rtpois(n = 1, lambda = param$PTMMultipleLambda * mod_aas,
a = 1, b = mod_aas)
)
return(out)
})
}),
unlist(param$PTMTypes))
# out <- sort(sample(
#   x = unlist(possible.modification.sites[[x]]),
#   prob = rep(unlist(modification.probability.weight[[x]]),
#              unlist(lapply(possible.modification.sites[[x]], function(y) lengths(y)))),
#   size = extraDistr::rtpois(n = 1, lambda = param$PTMMultipleLambda * length(unlist(possible.modification.sites[[x]])),
#                             a = 1, b = length(unlist(possible.modification.sites[[x]])))
# ))
# return(out)
} else {
return(unlist(possible.modification.sites[[x]]))
}
})
# Sample possible modification sites for each sequence based on the adjusted probability weights and
# size based on a truncated poisson distribution.
selected.modification.sites <- lapply(1:length(possible.modification.sites), function(x) {
if (length(unlist(possible.modification.sites[[x]])) > 1) {
# Over PTM types
setNames(lapply(unlist(param$PTMTypes), function(y) {
# Over modification sites
lapply(seq_len(length(possible.modification.sites[[x]][[y]])), function(z) {
mod_aas <- length(possible.modification.sites[[x]][[y]][[z]])
print(mod_aas)
if(mod_aas == 0) return(NULL)
out <- sample(
x = unlist(possible.modification.sites[[x]][[y]][[z]]),
prob = rep(modification.probability.weight[[x]][[y]][[z]], mod_aas),
size = extraDistr::rtpois(n = 1, lambda = param$PTMMultipleLambda * mod_aas,
a = 1, b = mod_aas)
)
return(out)
})
}),
unlist(param$PTMTypes))
# out <- sort(sample(
#   x = unlist(possible.modification.sites[[x]]),
#   prob = rep(unlist(modification.probability.weight[[x]]),
#              unlist(lapply(possible.modification.sites[[x]], function(y) lengths(y)))),
#   size = extraDistr::rtpois(n = 1, lambda = param$PTMMultipleLambda * length(unlist(possible.modification.sites[[x]])),
#                             a = 1, b = length(unlist(possible.modification.sites[[x]])))
# ))
# return(out)
} else {
return(unlist(possible.modification.sites[[x]]))
}
})
x <- y <- z <- 1
sample(
x = unlist(possible.modification.sites[[x]][[y]][[z]]),
prob = rep(modification.probability.weight[[x]][[y]][[z]], mod_aas),
size = extraDistr::rtpois(n = 1, lambda = param$PTMMultipleLambda * mod_aas,
a = 1, b = mod_aas)
# Sample possible modification sites for each sequence based on the adjusted probability weights and
# size based on a truncated poisson distribution.
selected.modification.sites <- lapply(1:length(possible.modification.sites), function(x) {
# Sample possible modification sites for each sequence based on the adjusted probability weights and
# size based on a truncated poisson distribution.
selected.modification.sites <- lapply(1:length(possible.modification.sites), function(x) {
if (length(unlist(possible.modification.sites[[x]])) > 1) {
# Over PTM types
setNames(lapply(unlist(param$PTMTypes), function(y) {
# Over modification sites
lapply(seq_len(length(possible.modification.sites[[x]][[y]])), function(z) {
mod_aas <- length(possible.modification.sites[[x]][[y]][[z]])
if(mod_aas == 0) return(NULL)
out <- sample(
x = unlist(possible.modification.sites[[x]][[y]][[z]]),
prob = rep(modification.probability.weight[[x]][[y]][[z]], mod_aas),
size = extraDistr::rtpois(n = 1, lambda = param$PTMMultipleLambda * mod_aas,
a = 1, b = mod_aas)
)
print(out)
return(out)
})
}),
unlist(param$PTMTypes))
# out <- sort(sample(
#   x = unlist(possible.modification.sites[[x]]),
#   prob = rep(unlist(modification.probability.weight[[x]]),
#              unlist(lapply(possible.modification.sites[[x]], function(y) lengths(y)))),
#   size = extraDistr::rtpois(n = 1, lambda = param$PTMMultipleLambda * length(unlist(possible.modification.sites[[x]])),
#                             a = 1, b = length(unlist(possible.modification.sites[[x]])))
# ))
# return(out)
} else {
return(unlist(possible.modification.sites[[x]]))
}
})
unlist(possible.modification.sites[[x]][[y]][[z]])
rep(modification.probability.weight[[x]][[y]][[z]], mod_aas)
mod_aas <- length(possible.modification.sites[[x]][[y]][[z]])
rep(modification.probability.weight[[x]][[y]][[z]], mod_aas)
extraDistr::rtpois(n = 1, lambda = param$PTMMultipleLambda * mod_aas,
a = 1, b = mod_aas)
mod_aas
param$PTMMultipleLambda
param$PTMMultipleLambda <- 2
extraDistr::rtpois(n = 1, lambda = param$PTMMultipleLambda * mod_aas,
a = 1, b = mod_aas)
runApp('inst/shiny')
runApp('inst/shiny')
Param$paramGroundTruth$PropModPerProt
Param$paramGroundTruth$PropModPerProt <- 1
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite =T )
devtools::load_all()
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite =T )
devtools::load_all()
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite =T )
devtools::load_all()
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite =T )
Param$paramGroundTruth$PTMMultipleLambda
Param$paramGroundTruth$PTMMultipleLambda <- 1
Param$paramGroundTruth$PTMMultipleLambda
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite =T )
devtools::load_all()
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite =T )
Param$paramGroundTruth$PTMMultipleLambda <- 0.1
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite =T )
Param$paramGroundTruth$PTMMultipleLambda <- 0.02
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite =T )
devtools::load_all()
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite =T )
devtools::load_all()
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite =T )
trace_back()
traceback()
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite =T )
traceback()
devtools::load_all()
traceback()
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite =T )
traceback()
devtools::load_all()
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite =T )
traceback()
devtools::load_all()
devtools::load_all()
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite =T )
devtools::load_all()
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite =T )
devtools::load_all()
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite =T )
devtools::load_all()
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite =T )
devtools::load_all()
devtools::load_all()
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite =T )
devtools::load_all()
devtools::load_all()
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite =T )
devtools::load_all()
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite =T )
devtools::load_all()
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite =T )
traceback()
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite =T )
devtools::load_all()
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite =T )
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite =T )
traceback()
devtools::load_all()
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite =T )
devtools::load_all()
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite =T )
sum(1)
devtools::load_all()
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite =T )
traceback()
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite =T )
devtools::load_all()
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite =T )
devtools::load_all()
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite =T )
devtools::load_all()
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite =T )
devtools::load_all()
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite =T )
devtools::load_all()
devtools::load_all()
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite =T )
devtools::load_all()
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite =T )
devtools::load_all()
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite =T )
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite =T )
# Modify the selected proteoforms.
selected.modifications <- modify(mod.proteoforms$Sequence, parameters)
selected.modifications <- as.data.frame(do.call(rbind, selected.modifications))
View(selected.modifications)
selected.modifications$Count
?Reduce
devtools::load_all()
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite =T )
print(selected.modification.sites)
x <- selected.modification.sites[[3]]
# All modified positions
all.sites <- lapply(possible.modification.sites[[x]], function(y) unlist(y))
x <- 10
# All modified positions
all.sites <- lapply(possible.modification.sites[[x]], function(y) unlist(y))
all.sites
lapply(all.sites, function(y) intersect(unlist(y), unlist(selected.modification.sites[[x]])))
lapply(selected.modification.sites, function(x) lapply(x, function(y) lapply(y, length)))
modification.probability.weight
lapply(possible.modification.sites, function(x) lapply(x, function(y) lapply(y, length)))
