#####################
## Create default list of testing parameters
#####################
Param <- def_param()
# Param$paramProteoformAb$QuantNoise <- seq(0.1, 0.9, 0.5)
# Param$paramProteoformAb$DiffRegFrac <- c(0.1, 0.3, 0.5)
# Param$paramProteoformAb$DiffRegMax <- seq(0.5, 2, 0.5)
# Param$paramDigest$Enzyme <- "trypsin"
# Param$paramDigest$PropMissedCleavages <- 0.01
# Param$paramDigest$MaxNumMissedCleavages <- 4
# Param$paramDigest$PepMinLength <- 7
# Param$paramDigest$PepMaxLength <- 30
Param$paramMSRun$PercDetectedVal <- 0.9
Param$paramMSRun$PercDetectability <- 1
Param$paramMSRun$WrongIDs <- 0
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config)
#####################
## Get the results of an individual simulation
#####################
res <- get_simulation(allBs[[1]]$Param, phosfake_config)
Param$paramProteoformAb$QuantNoise <- seq(0.1, 0.9, 0.5)
# Param$paramProteoformAb$DiffRegFrac <- c(0.1, 0.3, 0.5)
# Param$paramProteoformAb$DiffRegMax <- seq(0.5, 2, 0.5)
# Param$paramDigest$Enzyme <- "trypsin"
# Param$paramDigest$PropMissedCleavages <- 0.01
# Param$paramDigest$MaxNumMissedCleavages <- 4
# Param$paramDigest$PepMinLength <- 7
# Param$paramDigest$PepMaxLength <- 30
Param$paramMSRun$PercDetectedVal <- 0.9
Param$paramMSRun$PercDetectability <- 1
Param$paramMSRun$WrongIDs <- 0
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config)
#####################
## Get the results of an individual simulation
#####################
res <- get_simulation(allBs[[1]]$Param, phosfake_config)
ttt <- gather_all_sims(phosfake_config)
ttt
phosfake_config
ttt <- gather_all_sims(phosfake_config, "MSRun")
ttt
ttt[[1]]
devtools::load_all()
ttt <- gather_all_sims(phosfake_config, "MSRun")
ttt
names(ttt)
matrix_benchmarks(ttt, phosfake_config)
get_simulation(ttt[[1]], phosfake_config)
ttt[[1]]
get_simulation(ttt[[1]][[1]], phosfake_config)
allBs
get_simulation(ttt[[1]][[1]], phosfake_config, "MSRun")
?get
devtools::load_all()
ttt <- gather_all_sims(phosfake_config, "MSRun")
get_simulation(ttt[[1]], phosfake_config, "MSRun")
ttt
get_simulation(ttt[[1]], phosfake_config, "MSRun")
get_simulation(ttt[[1]]$Param, phosfake_config, "MSRun")
matrix_benchmarks(ttt)
test_that("gather_all_sims returns correct structure", {
# Mock configuration with a temp directory
temp_dir <- tempdir()
config <- list(resultFilePath = temp_dir)
# Create mock RData files
Param <- list(param1 = 1, param2 = 2)
Benchmarks <- list(metric1 = 0.95, metric2 = 0.85)
save(Param, Benchmarks, file = file.path(temp_dir, "outputDataAnalysis_test1.RData"))
Param <- list(param3 = 3, param4 = 4)
# Save without Benchmarks
save(Param, file = file.path(temp_dir, "outputDataAnalysis_test2.RData"))
# Run the function to gather all simulations
all_results <- gather_all_sims(config, stage = "DataAnalysis")
# Check that the output is a list
expect_type(all_results, "list")
# Check that it contains two elements (for the two RData files)
expect_equal(length(all_results), 2)
# Check that both have the correct hashes
expect_true("test1" %in% names(all_results))
expect_true("test2" %in% names(all_results))
# Check that test1 contains both Param and Benchmarks
expect_true("Param" %in% names(all_results$test1))
expect_true("Benchmarks" %in% names(all_results$test1))
# Check that test2 only contains Param (no Benchmarks)
expect_true("Param" %in% names(all_results$test2))
expect_false("Benchmarks" %in% names(all_results$test2))
# Check that the contents of Param and Benchmarks match what was saved
expect_equal(all_results$test1$Param, Param)
expect_equal(all_results$test1$Benchmarks, Benchmarks1)
expect_equal(all_results$test2$Param, Param2)
})
test_that("gather_all_sims returns correct structure", {
# Mock configuration with a temp directory
temp_dir <- tempdir()
config <- list(resultFilePath = temp_dir)
# Create mock RData files
Param <- list(param1 = 1, param2 = 2)
Benchmarks <- list(metric1 = 0.95, metric2 = 0.85)
save(Param, Benchmarks, file = file.path(temp_dir, "outputDataAnalysis_test1.RData"))
Param <- list(param3 = 3, param4 = 4)
# Save without Benchmarks
save(Param, file = file.path(temp_dir, "outputDataAnalysis_test2.RData"))
# Run the function to gather all simulations
all_results <- gather_all_sims(config, stage = "DataAnalysis")
# Check that the output is a list
expect_type(all_results, "list")
# Check that it contains two elements (for the two RData files)
expect_equal(length(all_results), 2)
# Check that both have the correct hashes
expect_true("test1" %in% names(all_results))
expect_true("test2" %in% names(all_results))
# Check that test1 contains both Param and Benchmarks
expect_true("Param" %in% names(all_results$test1))
expect_true("Benchmarks" %in% names(all_results$test1))
# Check that test2 only contains Param (no Benchmarks)
expect_true("Param" %in% names(all_results$test2))
expect_false("Benchmarks" %in% names(all_results$test2))
# Check that the contents of Param and Benchmarks match what was saved
expect_equal(all_results$test1$Param, Param)
expect_equal(all_results$test1$Benchmarks, Benchmarks)
expect_equal(all_results$test2$Param, Param)
})
Param <- def_param()
Param$paramGroundTruth$NumReps <- 5
ll <- list.files(tempdir(), pattern="output", full.names = TRUE)
unlink(ll, recursive = TRUE)
phosfake_config <- set_phosfake(resultFilePath = tempdir())
benchmarks <- run_sims(Param, phosfake_config)
sims <- gather_all_sims(phosfake_config)
sims
test_that("gather_all_sims returns correct structure", {
Param <- def_param()
Param$paramGroundTruth$NumReps <- 5
ll <- list.files(tempdir(), pattern="output", full.names = TRUE)
unlink(ll, recursive = TRUE)
phosfake_config <- set_phosfake(resultFilePath = tempdir())
benchmarks <- run_sims(Param, phosfake_config)
sims <- gather_all_sims(phosfake_config)
expect_true(length(sims[[1]]$Benchmarks) > 0)
expect_true(length(sims[[1]]$Param) > 0)
sims <- gather_all_sims(phosfake_config, stage = "MSRun")
expect_true(length(sims[[1]]$Benchmarks) == 0)
expect_true(length(sims[[1]]$Param) > 0)
})
test_that("gather_all_sims handles empty directories", {
ll <- list.files(tempdir(), pattern="output", full.names = TRUE)
unlink(ll, recursive = TRUE)
# Mock configuration with a different temp directory (empty)
phosfake_config <- set_phosfake(resultFilePath = tempdir())
# Run the function on an empty directory
all_results_empty <- gather_all_sims(config_empty, stage = "DataAnalysis")
# Check that the result is an empty list
expect_equal(length(all_results_empty), 0)
})
ll <- list.files(tempdir(), pattern="output", full.names = TRUE)
unlink(ll, recursive = TRUE)
# Mock configuration with a different temp directory (empty)
phosfake_config <- set_phosfake(resultFilePath = tempdir())
# Run the function on an empty directory
all_results_empty <- gather_all_sims(config_empty, stage = "DataAnalysis")
test_that("gather_all_sims handles empty directories", {
ll <- list.files(tempdir(), pattern="output", full.names = TRUE)
unlink(ll, recursive = TRUE)
# Mock configuration with a different temp directory (empty)
phosfake_config <- set_phosfake(resultFilePath = tempdir())
# Run the function on an empty directory
all_results_empty <- gather_all_sims(phosfake_config, stage = "DataAnalysis")
# Check that the result is an empty list
expect_equal(length(all_results_empty), 0)
})
test_that("gather_all_sims handles empty directories", {
ll <- list.files(tempdir(), pattern="output", full.names = TRUE)
unlink(ll, recursive = TRUE)
# Mock configuration with a different temp directory (empty)
phosfake_config <- set_phosfake(resultFilePath = tempdir())
# Run the function on an empty directory
all_results_empty <- gather_all_sims(phosfake_config, stage = "DataAnalysis")
# Check that the result is an empty list
expect_equal(length(all_results_empty), 0)
})
devtools::check()
library(wrProteo)
wrProteo::readWombatNormFile("/home/veit/devel/Bioinformatics/ELIXIR_EDAM/WOMBAT-P/WOMBAT-P_Processed/PXD009203/0.9.2/stand_prot_quant_mergedproline.csv")
wrProteo::readWombatNormFile("/home/veit/devel/Bioinformatics/ELIXIR_EDAM/WOMBAT-P/WOMBAT-P_Processed/PXD009203/0.9.2/stand_prot_quant_mergedproline.csv")
read.csv("/home/veit/devel/Bioinformatics/ELIXIR_EDAM/WOMBAT-P/WOMBAT-P_Processed/PXD009203/0.9.2/stand_prot_quant_mergedproline.csv")
wrProteo::readWombatNormFile("/home/veit/devel/Bioinformatics/ELIXIR_EDAM/WOMBAT-P/WOMBAT-P_Processed/PXD009203/0.9.2/stand_prot_quant_mergedproline.csv")
?readWombatNormFile
wrProteo::readWombatNormFile("stand_prot_quant_mergedproline.csv", /home/veit/devel/Bioinformatics/ELIXIR_EDAM/WOMBAT-P/WOMBAT-P_Processed/PXD009203/0.9.2/")
wrProteo::readWombatNormFile("stand_prot_quant_mergedproline.csv", "/home/veit/devel/Bioinformatics/ELIXIR_EDAM/WOMBAT-P/WOMBAT-P_Processed/PXD009203/0.9.2/")
A <- wrProteo::readWombatNormFile("stand_prot_quant_mergedproline.csv", "/home/veit/devel/Bioinformatics/ELIXIR_EDAM/WOMBAT-P/WOMBAT-P_Processed/PXD009203/0.9.2/", "proline")
A <- wrProteo::readWombatNormFile("stand_prot_quant_mergedproline.csv", "/home/veit/devel/Bioinformatics/ELIXIR_EDAM/WOMBAT-P/WOMBAT-P_Processed/PXD009203/0.9.2/", "proline", sdrf="../PXD009203.sdrf_corrected.tsv")
A <- wrProteo::readWombatNormFile("stand_prot_quant_mergedproline.csv", "/home/veit/devel/Bioinformatics/ELIXIR_EDAM/WOMBAT-P/WOMBAT-P_Processed/PXD009203/0.9.2/", "proline", sdrf="../PXD009203.sdrf_corrected.tsv")
A <- wrProteo::readWombatNormFile("stand_prot_quant_mergedproline.csv", "/home/veit/devel/Bioinformatics/ELIXIR_EDAM/WOMBAT-P/WOMBAT-P_Processed/PXD009203/0.9.2/", "proline", sdrf="PXD009203.sdrf_corrected.tsv")
A <- wrProteo::readWombatNormFile("stand_prot_quant_mergedproline.csv", "/home/veit/devel/Bioinformatics/ELIXIR_EDAM/WOMBAT-P/WOMBAT-P_Processed/PXD009203/0.9.2/", "proline", suplAnnotFile ="PXD009203.sdrf_corrected.tsv")
names(A)
names(A$quant)
names(A$annot)
names(A$counts)
A
names(A$quant)
A$raw
head(A$raw)
tail(A$raw)
tail(A$sampleSetup
)
A$quantNotes
A$notes
A <- wrProteo::readWombatNormFile("stand_prot_quant_mergedproline.csv", "/home/veit/devel/Bioinformatics/ELIXIR_EDAM/WOMBAT-P/WOMBAT-P_Processed/PXD009203/0.9.2/", "proline", suplAnnotFile ="PXD009203.sdrf_corrected.tsv")
tail(A$sampleSetup)
?readMaxQuantFile
sessionInfo()
A <- read.csv("https://ncdrisc.org/downloads/bp/NCD_RisC_Lancet_2016_BP_age_standardised_countries.csv")
A
head(A)
View(A)
knitr::opts_chunk$set(echo = TRUE)
show_sol <- TRUE
# Generate random data representing Cytokine Alpha concentrations in COVID-19 patients
data <- rnorm(5000, 5, 1)
# Create a histogram to visualize the distribution
hist(data, 50)
# Calculate and plot the mean concentration
dmean <- mean(data)
abline(v = dmean, col = "red")
# Calculate and plot the median concentration
dmedian <- median(data)
abline(v = dmedian, col = "green")
# Calculate and plot the minimum concentration
dmin <- min(data)
abline(v = dmin, col = "blue")
# Generate random data representing Cytokine Alpha concentrations in COVID-19 patients
data <- rnorm(5000, 5, 1)
# Create a histogram to visualize the distribution
hist(data, 50)
# Calculate and plot the mean concentration
dmean <- mean(data)
abline(v = dmean, col = "red")
# Calculate and plot the median concentration
dmedian <- median(data)
abline(v = dmedian, col = "green")
# Calculate and plot the minimum concentration
dmin <- min(data)
abline(v = dmin, col = "blue")
# Calculate and plot the maximum concentration
dmax <- max(data)
abline(v = dmax, col = "blue")
# Calculate and plot one standard deviation above and below the mean
dsd <- sd(data)
abline(v = dmean + dsd)
abline(v = dmean - dsd)
A <- read.csv("http://computproteomics.bmb.sdu.dk/BMB539Data/FlowCytoData.csv")
A <- read.csv("http://computproteomics.bmb.sdu.dk/BMB539Data/FlowCytoData.csv")
par(mfrow=c(2,2))
hist(A$X18s.RNA,100,main="18s RNA",xlab="abundance")
hist(A$abl,100,main="abl",xlab="abundance")
hist(A$bcr,100,main="bcr",xlab="abundance")
hist(A$bcr,100,main="bcr",xlab="abundance")
par(mfrow=c(1,1))
par(mfrow=c(2,2))
hist(A$X18s.RNA,100,main="18s RNA",xlab="abundance")
hist(A$abl,100,main="abl",xlab="abundance")
hist(A$bcr,100,main="bcr",xlab="abundance")
A <- read.csv("http://computproteomics.bmb.sdu.dk/BMB539Data/FlowCytoData.csv")
par(mfrow=c(2,2))
hist(A$X18s.RNA,100,main="18s RNA",xlab="abundance")
hist(A$abl,100,main="abl",xlab="abundance")
hist(A$bcr,100,main="bcr",xlab="abundance")
par(mfrow=c(1,1))
hist(1:10)
par(cex.lab=1.3, cex.axis=1.5, cex.main=1.5, mar=c(8.1, 4.1, 4.1, 2.1))
hist(1:10)
comics_factor <- comics
pca_out <- prcomp(as.matrix(comics), scale.=TRUE)
# Plot percentages on total variance as barplot
barplot(pca_out$sdev^2/sum(pca_out$sdev^2) * 100, border=0, col="lightblue", main="Variance plot", xlab="Principal Component", ylab="Variance in %", names.arg=1:ncol(comics))
comics <- read.csv("assets/dc-wikia-data.csv")
rownames(comics) <- comics$name
comics <- comics[,c(5,6,7,8,10,11,13)]
# remove all rows with NA
comics[comics == ""] <- NA
comics <- comics[complete.cases(comics),]
for (i in 1:ncol(comics))
comics[,i] <- as.factor(comics[,i])
head(comics)
table(comicss$ALIGN)
table(comics$ALIGN)
as.factor(comics$ALIGN)
table(as.factor(comics$ALIGN))
table(as.factor(comics$SEX))
?factor
label(as(factor(comics$SEX)))
labels(as(factor(comics$SEX)))
head(comic)
head(comics)
head(unclass(comics))
head(levels(comics))
head(comics$ALIGN)
as.numeric(head(comics$ALIGN))
as.numeric(head(comics$SEX))
(head(comics$SEX))
as.numeric(head(comics$ALIGN, 100))
(head(comics$ALIGN, 100))
par(cex.lab=1.3, cex.axis=1.5, cex.main=1.5, mar=c(8.1, 4.1, 4.1, 2.1))
comics_factor <- comics
for (i in 1:ncol(comics))
comics[,i] <- as.numeric(comics[,i])
pca_out <- prcomp(as.matrix(comics), scale.=TRUE)
# Plot percentages on total variance as barplot
barplot(pca_out$sdev^2/sum(pca_out$sdev^2) * 100, border=0, col="lightblue", main="Variance plot", xlab="Principal Component", ylab="Variance in %", names.arg=1:ncol(comics))
print(head(comics)
)
#####################
## Paths and directories
#####################
phosfake_config <- set_phosfake(fastaFilePath = system.file("Proteomes", package = "PhosFake"),
resultFilePath = "SimulatedDataSets",
cores = 4, clusterType = "PSOCK",
runStatTests = F,
calcAllBenchmarks = T
)
#####################
## Create default list of testing parameters
#####################
Param <- def_param()
# Overwrite the default values with the ones you want to test
# You can use multiple values for each parameter that then will be combined for
# all possible combinations in different simulated datasets
# Param$paramGroundTruth$PathToFasta <- "fasta_example.fasta"
# Param$paramGroundTruth$NumReps <- c(3)
# Param$paramGroundTruth$NumCond <- 5
Param$paramGroundTruth$PercExpressedProt <- 1.0
Param$paramGroundTruth$FracModProt <- 0.5
Param$paramGroundTruth$PTMTypes <- "ph"
Param$paramGroundTruth$PTMTypesMass <- c(79.966331)
Param$paramGroundTruth$PTMTypesDist <- c(1)
Param$paramGroundTruth$PTMMultipleLambda <- c(0.1)
Param$paramGroundTruth$ModifiableResidues <- list(c("S", "T", "Y"))
Param$paramGroundTruth$ModifiableResiduesDistr <- list(c(0.86,0.13, 0.01))
Param$paramProteoformAb$QuantNoise <- seq(0.1, 0.9, 0.5)
Param$paramDigest$EnrichmentEfficiency <- 0.8
Param$paramMSRun$PercDetectedVal <- 0.9
Param$paramMSRun$PercDetectability <- 1
Param$paramMSRun$WrongIDs <- 0
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config)
#####################
## Get the results of an individual simulation
#####################
res <- get_simulation(allBs[[1]]$Param, phosfake_config)
setwd("~/devel/Bioinformatics/EuBIC/PhosFake")
devtools::load_all()
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config)
#####################
## Get the results of an individual simulation
#####################
res <- get_simulation(allBs[[1]]$Param, phosfake_config)
#####################
## Make matrix of benchmarks and save
#####################
benchmarks <- matrix_benchmarks(allBs, phosfake_config)
write.csv(benchmarks, file = paste0(phosfake_config$resultFilePath, "/allBenchmarks.csv"))
#####################
## Visualize the results
#####################
# visualize the benchmarks and parameters of the second simulation
visualize_benchmarks(benchmarks, 1)
#####################
## Paths and directories
#####################
phosfake_config <- set_phosfake(fastaFilePath = system.file("Proteomes", package = "PhosFake"),
resultFilePath = "SimulatedDataSets",
cores = 4, clusterType = "PSOCK",
runStatTests = F,
calcAllBenchmarks = T
)
#####################
## Create default list of testing parameters
#####################
Param <- def_param()
# Overwrite the default values with the ones you want to test
# You can use multiple values for each parameter that then will be combined for
# all possible combinations in different simulated datasets
# Param$paramGroundTruth$PathToFasta <- "fasta_example.fasta"
# Param$paramGroundTruth$NumReps <- c(3)
# Param$paramGroundTruth$NumCond <- 5
Param$paramGroundTruth$PercExpressedProt <- 1.0
Param$paramGroundTruth$FracModProt <- 0.5
Param$paramGroundTruth$PTMTypes <- "ph"
Param$paramGroundTruth$PTMTypesMass <- c(79.966331)
Param$paramGroundTruth$PTMTypesDist <- c(1)
Param$paramGroundTruth$PTMMultipleLambda <- c(0.1)
Param$paramGroundTruth$ModifiableResidues <- list(c("S", "T", "Y"))
Param$paramGroundTruth$ModifiableResiduesDistr <- list(c(0.86,0.13, 0.01))
Param$paramProteoformAb$QuantNoise <- seq(0.1, 0.9, 0.5)
Param$paramDigest$EnrichmentEfficiency <- 0.8
Param$paramMSRun$PercDetectedVal <- 0.9
Param$paramMSRun$PercDetectability <- 1
Param$paramMSRun$WrongIDs <- 0
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config)
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config)
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite=T)
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite=T)
devtools::load_all()
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite=T)
match(1:10, 10)
devtools::load_all()
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite=T)
#####################
## Get the results of an individual simulation
#####################
res <- get_simulation(allBs[[1]]$Param, phosfake_config)
allBs
allBs[[1]]$Param
#####################
## Get the results of an individual simulation
#####################
res <- get_simulation(allBs[[1]]$Param, phosfake_config)
#####################
## Get the results of an individual simulation
#####################
res <- get_simulation(allBs[[1]]$Param, phosfake_config, "Digest")
res
res[[1]]
head(res[[1]])
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite=T)
Param$paramMSRun$PercDetectability <- 0.8
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config)
devtools::load_all()
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config)
devtools::load_all()
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config)
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite=T
)
0.1/0.9
devtools::load_all()
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite=T
)
Param$paramDigest$EnrichmentEfficiency <- 0.9
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite=T
)
Param$paramDigest$EnrichmentEfficiency <- 0.5
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite=T
)
Param$paramDigest$EnrichmentEfficiency <- 0.05
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite=T
)
Param$paramDigest$EnrichmentEfficiency <- 0.2
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, phosfake_config, overwrite=T
)
devtools::load_all()
devtools::check()
devtools::document()
devtools::document()
