brewer.pal(50)
brewer.pal(50, "Dark2")
library(colorspace)
devtools::load_all()
#####################
## Visualize the results
#####################
# visualize the benchmarks and parameters of the second simulation
visualize_benchmarks(benchmarks, ref_par = "NumReps")
devtools::load_all()
devtools::load_all()
#####################
## Visualize the results
#####################
# visualize the benchmarks and parameters of the second simulation
visualize_benchmarks(benchmarks, ref_par = "NumReps")
?qualitative_hcl
devtools::load_all()
#####################
## Visualize the results
#####################
# visualize the benchmarks and parameters of the second simulation
visualize_benchmarks(benchmarks, ref_par = "NumReps")
devtools::load_all()
#####################
## Visualize the results
#####################
# visualize the benchmarks and parameters of the second simulation
visualize_benchmarks(benchmarks, ref_par = "NumReps")
dark_colors <- colorspace::sequential_hcl(n = length(titles), palette = "Berlin")
devtools::load_all()
#####################
## Visualize the results
#####################
# visualize the benchmarks and parameters of the second simulation
visualize_benchmarks(benchmarks, ref_par = "NumReps")
devtools::load_all()
#####################
## Visualize the results
#####################
# visualize the benchmarks and parameters of the second simulation
visualize_benchmarks(benchmarks, ref_par = "NumReps")
devtools::load_all()
#####################
## Visualize the results
#####################
# visualize the benchmarks and parameters of the second simulation
visualize_benchmarks(benchmarks, ref_par = "NumReps")
devtools::load_all()
#####################
## Visualize the results
#####################
# visualize the benchmarks and parameters of the second simulation
visualize_benchmarks(benchmarks, ref_par = "NumReps")
devtools::load_all()
#####################
## Visualize the results
#####################
# visualize the benchmarks and parameters of the second simulation
visualize_benchmarks(benchmarks, ref_par = "NumReps")
devtools::load_all()
#####################
## Visualize the results
#####################
# visualize the benchmarks and parameters of the second simulation
visualize_benchmarks(benchmarks, ref_par = "NumReps")
devtools::load_all()
#####################
## Visualize the results
#####################
# visualize the benchmarks and parameters of the second simulation
visualize_benchmarks(benchmarks, ref_par = "NumReps")
devtools::load_all()
#####################
## Visualize the results
#####################
# visualize the benchmarks and parameters of the second simulation
visualize_benchmarks(benchmarks, ref_par = "NumReps")
devtools::load_all()
#####################
## Visualize the results
#####################
# visualize the benchmarks and parameters of the second simulation
visualize_benchmarks(benchmarks, ref_par = "NumReps")
devtools::load_all()
#####################
## Visualize the results
#####################
# visualize the benchmarks and parameters of the second simulation
visualize_benchmarks(benchmarks, ref_par = "NumReps")
devtools::load_all()
#####################
## Visualize the results
#####################
# visualize the benchmarks and parameters of the second simulation
visualize_benchmarks(benchmarks, ref_par = "NumReps")
devtools::load_all()
#####################
## Visualize the results
#####################
# visualize the benchmarks and parameters of the second simulation
visualize_benchmarks(benchmarks, ref_par = "NumReps")
combn(10,2)
devtools::load_all()
combn(10,2)
#####################
## Visualize the results
#####################
# visualize the benchmarks and parameters of the second simulation
visualize_benchmarks(benchmarks, ref_par = "NumReps")
# Setting fixed color code
dark_colors <- colorspace::qualitative_hcl(n = length(titles), palette = "Dark 2")
devtools::load_all()
# Setting fixed color code
dark_colors <- colorspace::qualitative_hcl(n = length(titles), palette = "Dark 2")
#####################
## Visualize the results
#####################
# visualize the benchmarks and parameters of the second simulation
visualize_benchmarks(benchmarks, ref_par = "NumReps")
# Setting fixed color code
dark_colors <- colorspace::qualitative_hcl(n = length(titles), palette = "Dark 2")
devtools::load_all()
#####################
## Visualize the results
#####################
# visualize the benchmarks and parameters of the second simulation
visualize_benchmarks(benchmarks, ref_par = "NumReps")
#####################
## Visualize the results
#####################
# visualize the benchmarks and parameters of the second simulation
visualize_benchmarks(benchmarks, ref_par = c("NumReps", "NumCond"))
read.csv("../ProteoMakerEval/allBenchmarks_SeqLength.csv")
benchs <- read.csv("../ProteoMakerEval/allBenchmarks_SeqLength.csv")
devtools::load_all()
visualize_benchmarks(benchs, "SeqLength")
visualize_benchmarks(benchs)
benchs
visualize_benchmarks(benchs, ref_par = "PepMaxLength")
visualize_benchmarks(benchs, 1:45, ref_par = "PepMaxLength")
visualize_benchmarks(benchs, 1:45, ref_par = c("PepMaxLength", "SeqLength"))
visualize_benchmarks(benchs, 1:45, ref_par = c("PepMaxLength", "SeqLen"))
visualize_benchmarks(benchs, 1:45, ref_par = c("PepMaxLength", "DiffRegMax"))
benchs
benchs[10:20,]
visualize_benchmarks(benchs, 1:45, ref_par = c("PepMaxLength", "PercExpressedProt"))
devtools::load_all()
visualize_benchmarks(benchs, 1:45, ref_par = c("PepMaxLength", "PercExpressedProt"))
devtools::load_all()
visualize_benchmarks(benchs, 1:45, ref_par = c("PepMaxLength", "PercExpressedProt"))
devtools::load_all()
visualize_benchmarks(benchs, 1:45, ref_par = c("PepMaxLength", "PercExpressedProt"))
devtools::load_all()
visualize_benchmarks(benchs, 1:45, ref_par = c("PepMaxLength", "PercExpressedProt"))
devtools::load_all()
visualize_benchmarks(benchs, 1:45, ref_par = c("PepMaxLength", "PercExpressedProt"))
devtools::load_all()
visualize_benchmarks(benchs, 1:45, ref_par = c("PepMaxLength", "PercExpressedProt"))
devtools::load_all()
visualize_benchmarks(benchs, 1:45, ref_par = c("PepMaxLength", "PercExpressedProt"))
visualize_benchmarks(benchs, 1:45, ref_par = c("PepMaxLength", "PercExpressedProt"))
devtools::load_all()
visualize_benchmarks(benchs, 1:45, ref_par = c("PepMaxLength", "PercExpressedProt"))
devtools::load_all()
visualize_benchmarks(benchs, 1:45, ref_par = c("PepMaxLength", "PercExpressedProt"))
devtools::load_all()
visualize_benchmarks(benchs, 1:45, ref_par = c("PepMaxLength", "PercExpressedProt"))
traceback()
visualize_benchmarks(benchs, 1:45, ref_par = c("PepMaxLength", "PercExpressedProt"))
traceback()
devtools::load_all()
visualize_benchmarks(benchs, 1:45, ref_par = c("PepMaxLength", "PercExpressedProt"))
devtools::load_all()
visualize_benchmarks(benchs, 1:45, ref_par = c("PepMaxLength", "PercExpressedProt"))
devtools::load_all()
visualize_benchmarks(benchs, 1:45, ref_par = c("PepMaxLength", "PercExpressedProt"))
devtools::load_all()
visualize_benchmarks(benchs, 1:45, ref_par = c("PepMaxLength", "PercExpressedProt"))
devtools::load_all()
visualize_benchmarks(benchs, 1:45, ref_par = c("PepMaxLength", "PercExpressedProt"))
visualize_benchmarks(benchs, 1:45, ref_par = c("PepMaxLength", "PercExpressedProt"))
devtools::load_all()
visualize_benchmarks(benchs, 1:45, ref_par = c("PepMaxLength", "PercExpressedProt"))
devtools::load_all()
visualize_benchmarks(benchs, 1:45, ref_par = c("PepMaxLength", "PercExpressedProt"))
devtools::load_all()
visualize_benchmarks(benchs, 1:45, ref_par = c("PepMaxLength", "PercExpressedProt"))
devtools::load_all()
visualize_benchmarks(benchs, 1:45, ref_par = c("PepMaxLength", "PercExpressedProt"))
visualize_benchmarks(benchs, 1:45, ref_par = c("PepMaxLength", "NumProteins"))
visualize_benchmarks(benchs, 1:45, ref_par = c("PepMaxLength", "NumProts"))
benchs
visualize_benchmarks(benchs, 1:45, ref_par = c("PepMaxLength", "PercDetectedVal"))
devtools::load_all()
visualize_benchmarks(benchs, 1:45, ref_par = c("PepMaxLength", "PercDetectedVal"))
visualize_benchmarks(benchs, 1:45, ref_par = c("PercDetectedVal","PepLengthMax"))
visualize_benchmarks(benchs, 1:45, ref_par = c("PercDetectedVal","PepMaxLength"))
visualize_benchmarks(benchs, 1:45, ref_par = c("PepMinLength","PepMaxLength"))
visualize_benchmarks(benchs, 1:45, ref_par = c("PepMinLength","PercDetectedVal"))
devtools::load_all()
library(ProteoMaker)
#####################
## Paths and directories
#####################
proteomaker <- set_proteomaker(fastaFilePath = system.file("Proteomes", package = "ProteoMaker"),
resultFilePath = "SimulatedDataSets",
cores = 2, clusterType = "PSOCK",
runStatTests = T,
calcAllBenchmarks = T
)
#####################
## Create default list of testing parameters
#####################
# Param <- def_param("tmp/parameters.yml")
Param <- def_param()
# Param$paramDigest$Enzyme <- "trypsin"
Param$paramDigest$PropMissedCleavages <- 0.5
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, Config = proteomaker)
#####################
## Get the results of an individual simulation
#####################
res <- get_simulation(allBs[[1]]$Param, Config = proteomaker, stage = "DataAnalysis")
res$Stats
res$Stats$MC
res$StatsPep$MC
unlist(res$StatsPep$MC)
hist(unlist(res$StatsPep$MC))
table(unlist(res$StatsPep$MC))
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, Config = proteomaker)
# Param$paramDigest$Enzyme <- "trypsin"
Param$paramDigest$PropMissedCleavages <- 1
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, Config = proteomaker)
# Param$paramDigest$Enzyme <- "trypsin"
Param$paramDigest$PropMissedCleavages <- 0.1
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, Config = proteomaker)
table(unlist(res$StatsPep$MC))
#####################
## Get the results of an individual simulation
#####################
res <- get_simulation(allBs[[1]]$Param, Config = proteomaker, stage = "DataAnalysis")
#####################
## Get the results of an individual simulation
#####################
res <- get_simulation(allBs[[1]]$Param, Config = proteomaker, stage = "MSRun")
table(unlist(res$AfterMSRun$NonEnriched$MC))
#####################
## Get the results of an individual simulation
#####################
res <- get_simulation(allBs[[1]]$Param, Config = proteomaker, stage = "Digestion")
?get_simulation
#####################
## Get the results of an individual simulation
#####################
res <- get_simulation(allBs[[1]]$Param, Config = proteomaker, stage = "Digest")
table(res$BeforeMS$NonEnriched$MC)
(res$BeforeMS$NonEnriched$MC)
table(unlist(res$BeforeMS$NonEnriched$MC))
View(res$BeforeMS$NonEnriched)
View(res$BeforeMS$NonEnriched)
A <- res$BeforeMS$NonEnriched
A$MC <- unlist(A$MC)
A$MC
A$MC <- sapply(A$MC, function(x) unlist(x)[1])
View(A)
# Param$paramDigest$Enzyme <- "trypsin"
Param$paramDigest$PropMissedCleavages <- 2
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, Config = proteomaker)
#####################
## Get the results of an individual simulation
#####################
res <- get_simulation(allBs[[1]]$Param, Config = proteomaker, stage = "DataAnalysis")
table(res$StatsPep$MC)
table(unlist(res$StatsPep$MC))
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, Config = proteomaker)
#####################
## Get the results of an individual simulation
#####################
res <- get_simulation(allBs[[1]]$Param, Config = proteomaker, stage = "DataAnalysis")
table(res$StatsPep$MC)
table(unlist(res$StatsPep$MC))
Param$paramMSRun$PercDetectability <- 1
allBs <- run_sims(Param, Config = proteomaker)
#####################
## Get the results of an individual simulation
#####################
res <- get_simulation(allBs[[1]]$Param, Config = proteomaker, stage = "DataAnalysis")
table(unlist(res$StatsPep$MC))
#####################
## Visualize the results
#####################
# visualize the benchmarks and parameters of the second simulation
visualize_benchmarks(benchmarks, ref_par = "NumReps")
#####################
## Get the results of an individual simulation
#####################
res <- get_simulation(allBs[[1]]$Param, Config = proteomaker, stage = "DataAnalysis")
#####################
## Make matrix of benchmarks and save
#####################
benchmarks <- matrix_benchmarks(allBs, )
#####################
## Visualize the results
#####################
# visualize the benchmarks and parameters of the second simulation
visualize_benchmarks(benchmarks, ref_par = "NumReps")
?do.call
for (i in 1:100) benchs <- rbind(benchs, benchs)
for (i in 1:10) benchmarks <- rbind(benchmarks, benchmarks)
dim(benchmarks)
#####################
## Visualize the results
#####################
# visualize the benchmarks and parameters of the second simulation
visualize_benchmarks(benchmarks, ref_par = "NumReps")
benchmarks$NumReps <- 1:1024
#####################
## Visualize the results
#####################
# visualize the benchmarks and parameters of the second simulation
visualize_benchmarks(benchmarks, ref_par = "NumReps")
#####################
## Make matrix of benchmarks and save
#####################
benchmarks <- matrix_benchmarks(allBs, )
for (i in 1:14) benchmarks <- rbind(benchmarks, benchmarks)
benchmarks$NumReps <- 1:16
for (i in 1:14) benchmarks <- rbind(benchmarks, benchmarks)
#####################
## Make matrix of benchmarks and save
#####################
benchmarks <- matrix_benchmarks(allBs, )
for (i in 1:4) benchmarks <- rbind(benchmarks, benchmarks)
dim(benchmarks)
benchmarks$NumReps <- 1:16
#####################
## Visualize the results
#####################
# visualize the benchmarks and parameters of the second simulation
visualize_benchmarks(benchmarks, ref_par = "NumReps")
#####################
## Visualize the results
#####################
# visualize the benchmarks and parameters of the second simulation
visualize_benchmarks(benchmarks, 1:45,ref_par = "NumReps")
for (i in 1:5) benchmarks <- rbind(benchmarks, benchmarks)
dim(benchmarks)
benchmarks$NumReps <- 1:512
#####################
## Visualize the results
#####################
# visualize the benchmarks and parameters of the second simulation
visualize_benchmarks(benchmarks, ref_par = "NumReps")
benchmarks <- benchmarks[1:100,]
#####################
## Visualize the results
#####################
# visualize the benchmarks and parameters of the second simulation
visualize_benchmarks(benchmarks, ref_par = "NumReps")
#####################
## Visualize the results
#####################
# visualize the benchmarks and parameters of the second simulation
visualize_benchmarks(benchmarks, 1:45, ref_par = "NumReps")
devtools::load_all()
#####################
## Visualize the results
#####################
# visualize the benchmarks and parameters of the second simulation
visualize_benchmarks(benchmarks, 1:45, ref_par = "NumReps")
benchmarks <- benchmarks[1:10,]
#####################
## Visualize the results
#####################
# visualize the benchmarks and parameters of the second simulation
visualize_benchmarks(benchmarks, 1:45, ref_par = "NumReps")
#####################
## Visualize the results
#####################
# visualize the benchmarks and parameters of the second simulation
visualize_benchmarks(benchmarks, 1:5, ref_par = "NumReps")
#####################
## Visualize the results
#####################
# visualize the benchmarks and parameters of the second simulation
visualize_benchmarks(benchmarks, 2:5, ref_par = "NumReps")
#####################
## Visualize the results
#####################
# visualize the benchmarks and parameters of the second simulation
visualize_benchmarks(benchmarks, 2:5, ref_par = "NumReps")
benchmarks$sumSquareDiffFCProt
benchmarks$sumSquareDiffFCPep
benchmarks$sumSquareDiffFCModPep
devtools::load_all()
#####################
## Get the results of an individual simulation
#####################
res <- get_simulation(allBs[[1]]$Param, Config = proteomaker, stage = "DataAnalysis")
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, Config = proteomaker)
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, Config = proteomaker, overwrite = T)
devtools::load_all()
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, Config = proteomaker, overwrite = T)
#####################
## Get the results of an individual simulation
#####################
res <- get_simulation(allBs[[1]]$Param, Config = proteomaker, stage = "DataAnalysis")
#####################
## Make matrix of benchmarks and save
#####################
benchmarks <- matrix_benchmarks(allBs, )
#####################
## Visualize the results
#####################
# visualize the benchmarks and parameters of the second simulation
visualize_benchmarks(benchmarks, ref_par = "NumReps")
benchmarks$sumSquareDiffFCProt
devtools::load_all()
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, Config = proteomaker, overwrite = T)
#####################
## Get the results of an individual simulation
#####################
res <- get_simulation(allBs[[1]]$Param, Config = proteomaker, stage = "DataAnalysis")
#####################
## Make matrix of benchmarks and save
#####################
benchmarks <- matrix_benchmarks(allBs, )
benchmarks$sumSquareDiffFCProt
devtools::load_all("../ProteoMakerEval/")
devtools::load_all("../ProteoMaker/")
devtools::load_all()
#####################
## Paths and directories
#####################
proteomaker <- set_proteomaker(fastaFilePath = system.file("Proteomes", package = "ProteoMaker"),
resultFilePath = "SimulatedDataSets",
cores = 2, clusterType = "PSOCK",
runStatTests = T,
calcAllBenchmarks = T
)
#####################
## Create default list of testing parameters
#####################
# Param <- def_param("tmp/parameters.yml")
Param <- def_param()
#####################
## Run the simulations
#####################
allBs <- run_sims(Param, Config = proteomaker)
#####################
## Get the results of an individual simulation
#####################
res <- get_simulation(allBs[[1]]$Param, Config = proteomaker, stage = "DataAnalysis")
#####################
## Make matrix of benchmarks and save
#####################
benchmarks <- matrix_benchmarks(allBs, )
#####################
## Visualize the results
#####################
# visualize the benchmarks and parameters of the second simulation
visualize_benchmarks(benchmarks, ref_par = "NumReps")
benchmarks <- rbind(benchmarks, benchmarks, benchmarks)
benchmarks$NumReps <- 1:3
#####################
## Visualize the results
#####################
# visualize the benchmarks and parameters of the second simulation
visualize_benchmarks(benchmarks, ref_par = "NumReps")
benchmarks$sumSquareDiffFCProt[2] <- NA
#####################
## Visualize the results
#####################
# visualize the benchmarks and parameters of the second simulation
visualize_benchmarks(benchmarks, ref_par = "NumReps")
benchmarks$numProteins[2] <- NA
#####################
## Visualize the results
#####################
# visualize the benchmarks and parameters of the second simulation
visualize_benchmarks(benchmarks, ref_par = "NumReps")
devtools::document()
